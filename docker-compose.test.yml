version: '3.8'

services:
  # Telegram Bot (основной)
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: magic_frame_bot_test
    restart: unless-stopped
    env_file: .env.client
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
      - WEBHOOK_PORT=8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    networks:
      - magic_frame_test_network
    ports:
      - "8081:8081"

  # PostgreSQL (урезанная версия)
  postgres:
    image: postgres:16-alpine
    container_name: magic_frame_postgres_test
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-magic_frame_bot}
      POSTGRES_USER: ${DB_USER:-magic_frame}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - magic_frame_test_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-magic_frame} -d ${DB_NAME:-magic_frame_bot}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Ограничиваем ресурсы для тестирования
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis (урезанная версия)
  redis:
    image: redis:7-alpine
    container_name: magic_frame_redis_test
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_test_data:/data
    networks:
      - magic_frame_test_network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Ограничиваем ресурсы
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  magic_frame_test_network:
    driver: bridge

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local 