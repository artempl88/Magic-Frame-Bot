import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from core.config import settings
from services.database import db

logger = logging.getLogger(__name__)

class APIBalanceMonitor:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞ API"""
    
    def __init__(self):
        self.api_key = settings.WAVESPEED_API_KEY
        self.api_url = "https://api.wavespeed.ai/api/v3/balance"
        self.low_balance_threshold = 10.0  # $10
        self.critical_balance_threshold = 0.0  # $0
        self._last_notification = {}  # –ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
    async def check_balance(self) -> Optional[float]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å API"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json"
                }
                
                async with session.get(self.api_url, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('code') == 200:
                            balance = data.get('data', {}).get('balance')
                            if balance is not None:
                                logger.info(f"API Balance: ${balance}")
                                return float(balance)
                        else:
                            logger.error(f"API balance check failed: {data.get('message', 'Unknown error')}")
                    else:
                        logger.error(f"API balance request failed with status {response.status}")
                        
        except Exception as e:
            logger.error(f"Error checking API balance: {e}")
            
        return None
    
    async def check_and_notify(self, bot=None) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        balance = await self.check_balance()
        
        if balance is None:
            return {
                'status': 'error',
                'balance': None,
                'message': 'Failed to check API balance'
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if balance <= self.critical_balance_threshold:
            status = 'critical'
            message = 'üö® –ö–†–ò–¢–ò–ß–ù–û: –ë–∞–ª–∞–Ω—Å API –∏—Å—á–µ—Ä–ø–∞–Ω ($0)! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
        elif balance <= self.low_balance_threshold:
            status = 'low'
            message = f'‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å API (${balance})! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.'
        else:
            status = 'ok'
            message = f'‚úÖ –ë–∞–ª–∞–Ω—Å API –≤ –Ω–æ—Ä–º–µ (${balance})'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º (–∏–∑–±–µ–≥–∞–µ–º —Å–ø–∞–º–∞)
        if status in ['critical', 'low'] and bot:
            await self._notify_admins(bot, balance, status, message)
        
        return {
            'status': status,
            'balance': balance,
            'message': message
        }
    
    async def _notify_admins(self, bot, balance: float, status: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞)"""
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
        last_notification = self._last_notification.get(status)
        if last_notification:
            # –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            # –î–ª—è –Ω–∏–∑–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
            cooldown = timedelta(minutes=30) if status == 'critical' else timedelta(hours=2)
            
            if now - last_notification < cooldown:
                return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_message = f"""
üîî <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ë–ê–õ–ê–ù–°–ï API</b>

{message}

üìä <b>–î–µ—Ç–∞–ª–∏:</b>
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance}
üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {now.strftime('%d.%m.%Y %H:%M:%S')}
üéØ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:
   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã–π: ${self.critical_balance_threshold}
   ‚Ä¢ –ù–∏–∑–∫–∏–π: ${self.low_balance_threshold}

{'üö® <b>–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –î–ï–ô–°–¢–í–ò–ï!</b>' if status == 'critical' else '‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>'}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in settings.ADMIN_IDS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode='HTML'
                )
                logger.info(f"Balance notification sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send balance notification to admin {admin_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self._last_notification[status] = now
    
    def is_service_available(self, balance: Optional[float]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if balance is None:
            return False  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
        return balance > self.critical_balance_threshold
    
    def get_maintenance_message(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö"""
        return (
            "‚ö†Ô∏è <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω "
            "–∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.\n\n"
            "üîß –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã\n"
            "‚è∞ –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n\n"
            "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
api_monitor = APIBalanceMonitor() 