# Конфигурация nginx для Seedance Bot с SSL от Beget
# Поместите этот файл в /etc/nginx/sites-available/seedance
# И создайте символическую ссылку: ln -s /etc/nginx/sites-available/seedance /etc/nginx/sites-enabled/

# Редирект HTTP → HTTPS (если еще не настроен)
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;
    
    # Если у вас уже есть основной сайт с редиректом, 
    # можете закомментировать этот блок
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Основной HTTPS сервер для бота
server {
    listen 443 ssl http2;
    server_name yourdomain.com www.yourdomain.com;
    
    # SSL сертификаты от Beget
    # Вариант 1: Если сертификаты в стандартном расположении
    ssl_certificate /etc/ssl/certs/yourdomain.com.crt;
    ssl_certificate_key /etc/ssl/private/yourdomain.com.key;
    
    # Вариант 2: Если используете существующие сертификаты
    # Найдите их командой: sudo find /etc -name "*.crt" -o -name "*.pem" | grep yourdomain
    # ssl_certificate /path/to/existing/certificate.crt;
    # ssl_certificate_key /path/to/existing/private.key;
    
    # Вариант 3: Если сертификаты от Let's Encrypt через Beget
    # ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    
    # Современные SSL настройки
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Заголовки безопасности
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Rate limiting для webhook
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=10r/s;
    
    # Telegram webhook (основная конфигурация)
    location /webhook {
        # Rate limiting
        limit_req zone=webhook burst=20 nodelay;
        
        # Проксирование к контейнеру бота
        proxy_pass http://127.0.0.1:8080/webhook;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Ограничения
        client_max_body_size 20m;
        
        # Таймауты
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Только POST запросы от Telegram
        limit_except POST {
            deny all;
        }
    }
    
    # Health check бота
    location /health {
        proxy_pass http://127.0.0.1:8080/health;
        access_log off;
    }
    
    # Статические файлы бота (если нужны)
    location /static/ {
        alias /path/to/seedance/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # Если у вас есть основной сайт, можете добавить:
    # location / {
    #     proxy_pass http://127.0.0.1:8081;  # ваш основной сайт
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
    
    # Или простая заглушка:
    location / {
        return 200 "Seedance Bot is running!\nWebhook: https://$host/webhook";
        add_header Content-Type text/plain;
    }
    
    # Логи для бота
    access_log /var/log/nginx/seedance_access.log;
    error_log /var/log/nginx/seedance_error.log;
} 