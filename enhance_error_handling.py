#!/usr/bin/env python3

import re

def enhance_error_handling():
    # Read the admin.py file
    with open('./bot/handlers/admin.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Replace the process_credits_change function with enhanced version
    old_function_pattern = r'async def process_credits_change\([\s\S]*?^    return success_count'
    
    enhanced_function = '''async def process_credits_change(
    user_id: int,
    amount: int,
    admin_id: int,
    bot
) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not isinstance(user_id, int) or user_id <= 0:
        logger.error(f"Invalid user_id: {user_id}")
        return False
    
    if not isinstance(amount, int) or amount == 0:
        logger.error(f"Invalid amount: {amount}")
        return False
    
    if abs(amount) > 100000:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        logger.error(f"Amount too large: {amount}")
        return False
    
    try:
        async with db.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, user_id)
            if not user:
                logger.warning(f"User {user_id} not found for credits change by admin {admin_id}")
                return False
            
            old_balance = user.balance
            new_balance = max(0, user.balance + amount)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏
            if amount < 0 and user.balance + amount < 0:
                logger.warning(f"Attempted to set negative balance for user {user_id}: {user.balance} + {amount}")
                new_balance = 0
            
            user.balance = new_balance
            
            if amount > 0:
                user.total_bought += amount
            else:
                user.total_spent += abs(amount)
            
            await session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                await db.log_admin_action(
                    admin_id=admin_id,
                    action="give_credits",
                    target_user_id=user.telegram_id,
                    details=f"Amount: {amount}, Balance: {old_balance} -> {new_balance}"
                )
            except Exception as log_error:
                logger.error(f"Failed to log admin action: {log_error}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                action_text = "–ø–æ–ø–æ–ª–Ω–µ–Ω" if amount > 0 else "—Å–ø–∏—Å–∞–Ω"
                text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å {action_text} –Ω–∞ {abs(amount)} –∫—Ä–µ–¥–∏—Ç–æ–≤\\n"
                text += f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                await bot.send_message(user.telegram_id, text)
                logger.info(f"Notification sent to user {user.telegram_id} about balance change")
            except Exception as notif_error:
                logger.error(f"Failed to notify user {user.telegram_id}: {notif_error}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            logger.info(f"Credits changed successfully for user {user_id}: {old_balance} -> {new_balance}")
            return True
            
    except Exception as e:
        logger.error(f"Critical error changing user {user_id} balance: {e}", exc_info=True)
        return False


async def broadcast_to_users(bot, admin_id: int, message_id: int) -> int:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    success_count = 0
    error_count = 0
    
    try:
        users = await db.get_all_users()
        total_users = len(users)
        
        logger.info(f"Starting broadcast to {total_users} users")
        
        for i, user in enumerate(users):
            try:
                await bot.copy_message(
                    chat_id=user.telegram_id,
                    from_chat_id=admin_id,
                    message_id=message_id
                )
                success_count += 1
                
                # –ê–Ω—Ç–∏—Ñ–ª—É–¥ –ø–∞—É–∑–∞
                await asyncio.sleep(0.05)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (i + 1) % 100 == 0:
                    logger.info(f"Broadcast progress: {i + 1}/{total_users} users processed")
                    
            except Exception as e:
                error_count += 1
                logger.error(f"Broadcast error for user {user.telegram_id}: {e}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–º–µ—á–∞–µ–º —ç—Ç–æ
                if "bot was blocked" in str(e).lower():
                    try:
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        pass
                    except:
                        pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        
        logger.info(f"Broadcast completed: {success_count}/{total_users} successful, {error_count} errors")
        return success_count
        
    except Exception as e:
        logger.error(f"Critical broadcast error: {e}", exc_info=True)'''
    
    # Replace the old function
    content = re.sub(old_function_pattern, enhanced_function, content, flags=re.MULTILINE)
    
    # Write the updated content
    with open('./bot/handlers/admin.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Enhanced error handling for critical functions")

if __name__ == "__main__":
    enhance_error_handling()
