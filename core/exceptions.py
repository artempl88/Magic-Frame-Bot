"""
–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Seedance Bot
"""
import logging
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

class SeedanceBotError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞"""
    def __init__(self, message: str = None, user_message: str = None, **kwargs):
        super().__init__(message)
        self.user_message = user_message or message
        self.extra = kwargs

class DatabaseError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    pass

class ConnectionError(DatabaseError):
    """–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    pass

class IntegrityError(DatabaseError):
    """–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class APIError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å API"""
    def __init__(self, message: str = None, status_code: int = None, response: Dict[str, Any] = None, **kwargs):
        super().__init__(message, **kwargs)
        self.status_code = status_code
        self.response = response

class WaveSpeedAPIError(APIError):
    """–û—à–∏–±–∫–∞ WaveSpeed API"""
    pass

class GenerationError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    pass

class QueueFullError(GenerationError):
    """–û—á–µ—Ä–µ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞"""
    def __init__(self, queue_size: int = None):
        super().__init__(
            f"Generation queue is full: {queue_size} tasks",
            user_message="–û—á–µ—Ä–µ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        self.queue_size = queue_size

class GenerationTimeoutError(GenerationError):
    """–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    def __init__(self, timeout: int = None):
        super().__init__(
            f"Generation timeout: {timeout}s",
            user_message="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        self.timeout = timeout

class PaymentError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    pass

class InsufficientCreditsError(PaymentError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    def __init__(self, required: int, available: int):
        self.required = required
        self.available = available
        super().__init__(
            f"Insufficient credits: required {required}, available {available}",
            user_message=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {required}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available}"
        )

class PaymentProviderError(PaymentError):
    """–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    pass

class RefundError(PaymentError):
    """–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    pass

class ValidationError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, field: str = None, value: Any = None, message: str = None):
        self.field = field
        self.value = value
        super().__init__(
            message or f"Validation error for field {field}: {value}",
            user_message=message or "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        )

class PromptValidationError(ValidationError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞"""
    pass

class ImageValidationError(ValidationError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    pass

class RateLimitError(SeedanceBotError):
    """–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def __init__(self, retry_after: int = None, limit_type: str = None):
        self.retry_after = retry_after
        self.limit_type = limit_type
        
        if retry_after:
            message = f"Rate limit exceeded. Retry after {retry_after} seconds"
            user_message = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫."
        else:
            message = "Rate limit exceeded"
            user_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        super().__init__(message, user_message)

class AuthorizationError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    pass

class UserBannedError(AuthorizationError):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω"""
    def __init__(self, reason: str = None):
        self.reason = reason
        super().__init__(
            f"User is banned: {reason}",
            user_message=f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason or '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª'}"
        )

class SubscriptionRequiredError(AuthorizationError):
    """–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª"""
    def __init__(self, channel_username: str):
        self.channel_username = channel_username
        super().__init__(
            f"Subscription to @{channel_username} required",
            user_message=f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{channel_username}"
        )

class PermissionDeniedError(AuthorizationError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"""
    def __init__(self, required_permission: str = None):
        self.required_permission = required_permission
        super().__init__(
            f"Permission denied: {required_permission} required",
            user_message="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
        )

class ConfigurationError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass

class MediaError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞"""
    pass

class VideoProcessingError(MediaError):
    """–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    pass

class DownloadError(MediaError):
    """–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    pass

class LocalizationError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    def __init__(self, key: str = None, language: str = None):
        self.key = key
        self.language = language
        super().__init__(
            f"Localization error: key={key}, language={language}",
            user_message="–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"
        )

class CacheError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pass

class TaskError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    pass

class WebhookError(SeedanceBotError):
    """–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    pass

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def handle_exceptions(exceptions_map: Dict[type, str] = None, log_errors: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    
    Usage:
        @handle_exceptions({
            InsufficientCreditsError: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
            WaveSpeedAPIError: "–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        })
        async def handler(message: Message):
            ...
    """
    def decorator(func):
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if log_errors:
                    logger.error(f"Error in {func.__name__}: {e}", exc_info=True)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è/–∫–æ–ª–ª–±–µ–∫–∞
                update = None
                for arg in args:
                    from aiogram.types import Message, CallbackQuery
                    if isinstance(arg, (Message, CallbackQuery)):
                        update = arg
                        break
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–∞—Ä—Ç—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                if exceptions_map and type(e) in exceptions_map:
                    error_text = exceptions_map[type(e)]
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_message –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                elif isinstance(e, SeedanceBotError) and e.user_message:
                    error_text = f"‚ùå {e.user_message}"
                # –î–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                elif isinstance(e, InsufficientCreditsError):
                    error_text = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {e.required}, –¥–æ—Å—Ç—É–ø–Ω–æ: {e.available}"
                elif isinstance(e, RateLimitError):
                    if e.retry_after:
                        error_text = f"‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫."
                    else:
                        error_text = "‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                elif isinstance(e, UserBannedError):
                    error_text = "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                elif isinstance(e, ValidationError):
                    error_text = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e.user_message or str(e)}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if update:
                    from aiogram.types import Message, CallbackQuery
                    
                    try:
                        if isinstance(update, Message):
                            await update.answer(error_text)
                        elif isinstance(update, CallbackQuery):
                            await update.answer(error_text, show_alert=True)
                    except Exception as send_error:
                        logger.error(f"Failed to send error message: {send_error}")
                
                # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è middleware
                raise
        
        return wrapper
    return decorator

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
def safe_handler(func):
    """
    –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Usage:
        @safe_handler
        async def my_handler(message: Message):
            ...
    """
    return handle_exceptions()(func)