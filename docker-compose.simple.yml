version: '3.8'

services:
  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: client_bot
    restart: unless-stopped
    env_file: .env.client
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
      - WEBHOOK_PORT=8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./locales:/app/locales:ro
    ports:
      - "127.0.0.1:8081:8081"  # Webhook для бота
    networks:
      - client_bot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: client_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-client_bot}
      POSTGRES_USER: ${DB_USER:-botuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5433:5432"  # Локальный доступ к БД
    networks:
      - client_bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-botuser} -d ${DB_NAME:-client_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: client_redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-redis_pass}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6380:6379"  # Локальный доступ к Redis
    networks:
      - client_bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker (только если нужны фоновые задачи)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: client_celery_worker
    restart: unless-stopped
    command: celery -A bot.tasks worker --loglevel=info --concurrency=2
    env_file: .env.client
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    depends_on:
      - redis
      - postgres
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    networks:
      - client_bot_network
    profiles:
      - full  # Запускается только с профилем --profile full

  # Автоматические бэкапы (каждый день в 3:00)
  backup_scheduler:
    image: postgres:16-alpine
    container_name: client_backup_scheduler
    restart: unless-stopped
    environment:
      - PGUSER=${DB_USER:-botuser}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME:-client_bot}
      - PGHOST=postgres
      - TZ=UTC
    volumes:
      - ./backups:/backups
    command: >
      sh -c "
        # Создаем директорию для бэкапов
        mkdir -p /backups
        
        # Создаем cron job для ежедневных бэкапов в 3:00
        echo '0 3 * * * pg_dump -h postgres -U $$PGUSER $$PGDATABASE | gzip > /backups/auto_backup_$$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).sql.gz && echo \"{\\\"created_at\\\": \\\"$$(date -Iseconds)\\\", \\\"description\\\": \\\"Автоматический ежедневный бэкап\\\", \\\"size\\\": $$(stat -c%s /backups/auto_backup_$$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).sql.gz), \\\"database\\\": \\\"$$PGDATABASE\\\", \\\"user\\\": \\\"$$PGUSER\\\"}\" > /backups/auto_backup_$$(date +\\%Y\\%m\\%d_\\%H\\%M\\%S).sql.gz.meta' > /etc/crontabs/root &&
        
        # Создаем cron job для очистки старых бэкапов (старше 30 дней) каждый день в 4:00  
        echo '0 4 * * * find /backups -name \"auto_backup_*.sql.gz\" -mtime +30 -exec rm {} \\; && find /backups -name \"auto_backup_*.sql.gz.meta\" -mtime +30 -exec rm {} \\;' >> /etc/crontabs/root &&
        
        # Запускаем crond
        crond -f -d 8
      "
    depends_on:
      - postgres
    networks:
      - client_bot_network
    profiles:
      - backup  # Запускается только с профилем --profile backup

networks:
  client_bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local 