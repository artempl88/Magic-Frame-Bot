version: '3.8'

services:
  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seedance_bot
    restart: unless-stopped
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./locales:/app/locales:ro
    networks:
      - seedance_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: seedance_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-seedance_bot}
      POSTGRES_USER: ${DB_USER:-seedance}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "15432:5432"
    networks:
      - seedance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-seedance} -d ${DB_NAME:-seedance_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: seedance_redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-seedance_redis_pass}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "16379:6379"
    networks:
      - seedance_network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-seedance_redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seedance_celery_worker
    restart: unless-stopped
    command: celery -A bot.tasks worker --loglevel=info --concurrency=4
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    depends_on:
      - redis
      - postgres
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    networks:
      - seedance_network

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seedance_celery_beat
    restart: unless-stopped
    command: celery -A bot.tasks beat --loglevel=info --schedule=/app/celerybeat/celerybeat-schedule
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - celerybeat_data:/app/celerybeat
    networks:
      - seedance_network

  # Celery Flower (Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seedance_flower
    restart: unless-stopped
    command: celery -A bot.tasks flower --port=5555 --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    env_file: .env
    ports:
      - "127.0.0.1:5555:5555"
    depends_on:
      - redis
    networks:
      - seedance_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: seedance_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/var/www/static:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - bot
    networks:
      - seedance_network

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: seedance_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - seedance_network

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: seedance_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.seedance.bot
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      - prometheus
    networks:
      - seedance_network

  # PostgreSQL Backup
  postgres_backup:
    image: postgres:16-alpine
    container_name: seedance_postgres_backup
    restart: unless-stopped
    environment:
      - PGUSER=${DB_USER:-seedance}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME:-seedance_bot}
      - PGHOST=postgres
    volumes:
      - ./backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        echo '0 3 * * * /backup.sh' > /etc/crontabs/root &&
        crond -f -d 8
      "
    depends_on:
      - postgres
    networks:
      - seedance_network

networks:
  seedance_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  celerybeat_data:
    driver: local