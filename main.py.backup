import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from core.config import settings
from bot.handlers import (
    start_handler,
    generation_handler,
    payment_handler,
    balance_handler,
    settings_handler,
    admin_handler,
    support_handler,
    utm_admin_handler
)
from bot.middlewares import (
    ThrottlingMiddleware,
    LoggingMiddleware,
    AuthMiddleware,
    I18nMiddleware
)
from services.database import DatabaseService, init_database
from services.api_monitor import api_monitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseService()

async def setup_bot_commands(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    ru_commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="menu", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="generate", description="üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ"),
        BotCommand(command="balance", description="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="buy", description="üõí –ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã"),
        BotCommand(command="history", description="üìú –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"),
        BotCommand(command="referral", description="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        BotCommand(command="support", description="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    ]
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    en_commands = [
        BotCommand(command="start", description="üöÄ Start working"),
        BotCommand(command="menu", description="üè† Main menu"),
        BotCommand(command="generate", description="üé¨ Create video"),
        BotCommand(command="balance", description="üí∞ My balance"),
        BotCommand(command="buy", description="üõí Buy credits"),
        BotCommand(command="history", description="üìú Generation history"),
        BotCommand(command="referral", description="üë• Invite friend"),
        BotCommand(command="settings", description="‚öôÔ∏è Settings"),
        BotCommand(command="help", description="‚ùì Help"),
        BotCommand(command="support", description="üí¨ Support")
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    await bot.set_my_commands(ru_commands, language_code="ru")
    await bot.set_my_commands(en_commands, language_code="en")
    await bot.set_my_commands(ru_commands)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        import os
        os.makedirs(settings.TEMP_FILES_DIR, exist_ok=True)
        os.makedirs(settings.LOCALES_DIR, exist_ok=True)
        logger.info("Directories created")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await init_database()
        logger.info("Database initialized")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
        await setup_bot_commands(bot)
        
        if not settings.DEBUG:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è production
            await bot.set_webhook(
                url=settings.WEBHOOK_URL,
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query", "pre_checkout_query", "my_chat_member"]
            )
            logger.info(f"Webhook set to {settings.WEBHOOK_URL}")
        
        logger.info("Bot started successfully")
        
    except Exception as e:
        logger.error(f"Error during startup: {e}")
        raise

async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    try:
        if not settings.DEBUG:
            await bot.delete_webhook()
        
        await bot.session.close()
        logger.info("Bot stopped")
        
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")

def register_routers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    dp.include_router(start_handler)
    dp.include_router(generation_handler)
    dp.include_router(payment_handler)
    dp.include_router(balance_handler)
    dp.include_router(settings_handler)
    dp.include_router(support_handler)
    dp.include_router(utm_admin_handler)
    dp.include_router(admin_handler)  # –ê–¥–º–∏–Ω —Ä–æ—É—Ç–µ—Ä –≤ –∫–æ–Ω—Ü–µ

def register_middlewares(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""
    # Throttling - –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    dp.message.middleware(ThrottlingMiddleware(rate_limit=0.5))
    dp.callback_query.middleware(ThrottlingMiddleware(rate_limit=0.3))
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    dp.message.middleware(LoggingMiddleware())
    dp.callback_query.middleware(LoggingMiddleware())
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    dp.message.middleware(AuthMiddleware())
    dp.callback_query.middleware(AuthMiddleware())
    
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å
    dp.message.middleware(I18nMiddleware())
    dp.callback_query.middleware(I18nMiddleware())

async def create_bot_instance():
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    bot = Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML")
    )
    return bot

async def create_dispatcher():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    # Redis storage –¥–ª—è FSM
    if settings.REDIS_URL:
        try:
            storage = RedisStorage.from_url(settings.REDIS_URL)
            logger.info("Using RedisStorage")
        except Exception as e:
            logger.warning(f"Redis connection failed: {e}, falling back to MemoryStorage")
            from aiogram.fsm.storage.memory import MemoryStorage
            storage = MemoryStorage()
    else:
        from aiogram.fsm.storage.memory import MemoryStorage
        storage = MemoryStorage()
        logger.warning("Using MemoryStorage - not recommended for production!")
    
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    register_middlewares(dp)
    register_routers(dp)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    return dp

def create_web_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook —Ä–µ–∂–∏–º–∞"""
    async def create_app():
        bot = await create_bot_instance()
        dp = await create_dispatcher()
        
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
        webhook_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot
        )
        webhook_handler.register(app, path=settings.WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)
        
        return app
    
    return create_app()

async def main_polling():
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    logger.info("Starting bot in polling mode...")
    
    bot = await create_bot_instance()
    dp = await create_dispatcher()
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.delete_webhook(drop_pending_updates=True)
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        await db.check_connection()
        logger.info("Database connection established")
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=settings.BOT_TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    register_routers(dp)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    register_middlewares(dp)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    try:
        from bot.tasks import recover_lost_videos_task
        logger.info("Starting lost videos recovery task")
        await recover_lost_videos_task()
    except Exception as e:
        logger.error(f"Error starting recovery task: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API
    api_monitor_task = asyncio.create_task(api_monitor.run_monitoring(bot))
    
    try:
        logger.info("Bot started")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    finally:
        api_monitor_task.cancel()
        await bot.session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    if settings.DEBUG:
        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - polling
        try:
            asyncio.run(main_polling())
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
    else:
        # Production —Ä–µ–∂–∏–º - webhook
        app = create_web_app()
        web.run_app(
            app,
            host="0.0.0.0",
            port=settings.WEBHOOK_PORT
        )

if __name__ == "__main__":
    main()