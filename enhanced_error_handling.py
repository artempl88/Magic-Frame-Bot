# Enhanced error handling functions to be added to admin.py

async def safe_db_operation(operation_name: str, operation_func, *args, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è DB –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        result = await operation_func(*args, **kwargs)
        logger.info(f"DB operation '{operation_name}' completed successfully")
        return result, None
    except Exception as e:
        error_msg = f"DB operation '{operation_name}' failed: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return None, error_msg

async def safe_api_call(api_name: str, api_func, *args, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
    """
    try:
        result = await api_func(*args, **kwargs)
        logger.info(f"API call '{api_name}' completed successfully")
        return result, None
    except Exception as e:
        error_msg = f"API call '{api_name}' failed: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return None, error_msg

async def safe_file_operation(file_operation: str, file_func, *args, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    try:
        result = await file_func(*args, **kwargs)
        logger.info(f"File operation '{file_operation}' completed successfully")
        return result, None
    except Exception as e:
        error_msg = f"File operation '{file_operation}' failed: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return None, error_msg

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
async def enhanced_process_credits_change(
    user_id: int,
    amount: int,
    admin_id: int,
    bot
) -> tuple[bool, str]:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not isinstance(user_id, int) or user_id <= 0:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    if not isinstance(amount, int) or amount == 0:
        return False, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤"
    
    if abs(amount) > 100000:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        return False, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–º–∞–∫—Å. 100,000)"
    
    operation_name = f"change_credits_user_{user_id}_amount_{amount}"
    
    try:
        async with db.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race conditions
            user = await session.get(User, user_id, populate_existing=True)
            if not user:
                logger.warning(f"User {user_id} not found for credits change by admin {admin_id}")
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            old_balance = user.balance
            new_balance = max(0, user.balance + amount)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏
            if amount < 0 and user.balance + amount < 0:
                logger.warning(f"Attempted to set negative balance for user {user_id}: {user.balance} + {amount}")
                new_balance = 0
            
            user.balance = new_balance
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if amount > 0:
                user.total_bought += amount
            else:
                user.total_spent += abs(amount)
            
            await session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                await db.log_admin_action(
                    admin_id=admin_id,
                    action="give_credits",
                    target_user_id=user.telegram_id,
                    details=f"Amount: {amount}, Balance: {old_balance} -> {new_balance}",
                    additional_data={
                        "old_balance": old_balance,
                        "new_balance": new_balance,
                        "amount": amount
                    }
                )
            except Exception as log_error:
                logger.error(f"Failed to log admin action: {log_error}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                action_text = "–ø–æ–ø–æ–ª–Ω–µ–Ω" if amount > 0 else "—Å–ø–∏—Å–∞–Ω"
                text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å {action_text} –Ω–∞ {abs(amount)} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                text += f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                await bot.send_message(user.telegram_id, text)
                logger.info(f"Notification sent to user {user.telegram_id} about balance change")
            except Exception as notif_error:
                logger.error(f"Failed to notify user {user.telegram_id}: {notif_error}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            logger.info(f"Credits changed successfully for user {user_id}: {old_balance} -> {new_balance}")
            return True, f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω: {old_balance} -> {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞"

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
async def enhanced_broadcast_to_users(bot, admin_id: int, message_id: int) -> tuple[int, int, str]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    success_count = 0
    error_count = 0
    errors_log = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        users_result, error_msg = await safe_db_operation(
            "get_all_users_for_broadcast",
            db.get_all_users
        )
        
        if users_result is None:
            return 0, 0, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {error_msg}"
        
        users = users_result
        total_users = len(users)
        
        logger.info(f"Starting broadcast to {total_users} users")
        
        for i, user in enumerate(users):
            try:
                await bot.copy_message(
                    chat_id=user.telegram_id,
                    from_chat_id=admin_id,
                    message_id=message_id
                )
                success_count += 1
                
                # –ê–Ω—Ç–∏—Ñ–ª—É–¥ –ø–∞—É–∑–∞
                await asyncio.sleep(0.05)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (i + 1) % 100 == 0:
                    logger.info(f"Broadcast progress: {i + 1}/{total_users} users processed")
                    
            except Exception as e:
                error_count += 1
                error_msg = f"User {user.telegram_id}: {str(e)}"
                errors_log.append(error_msg)
                logger.error(f"Broadcast error for user {user.telegram_id}: {e}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–º–µ—á–∞–µ–º —ç—Ç–æ
                if "bot was blocked" in str(e).lower():
                    try:
                        await db.update_user_status(user.telegram_id, is_blocked=True)
                    except:
                        pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        result_msg = f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫"
        logger.info(f"Broadcast completed: {success_count}/{total_users} successful")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if errors_log:
            try:
                await db.log_admin_action(
                    admin_id=admin_id,
                    action="broadcast_errors",
                    details=f"Errors: {error_count}, Success: {success_count}",
                    additional_data={"errors": errors_log[:50]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
                )
            except:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        
        return success_count, error_count, result_msg
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return success_count, error_count, error_msg
