version: '3.8'

services:
  # Telegram Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seedance_bot
    restart: unless-stopped
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./backups:/app/backups
    networks:
      - seedance_network
    ports:
      - "127.0.0.1:8080:8080"  # Webhook для системного nginx

# healthcheck:
#   test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
#   interval: 30s
#   timeout: 10s
#   retries: 3
#   start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: seedance_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-seedance_bot}
      POSTGRES_USER: ${DB_USER:-seedance}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    # Убираем внешний порт для безопасности - доступ только изнутри сети
    networks:
      - seedance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-seedance} -d ${DB_NAME:-seedance_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: seedance_redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    # Убираем внешний порт для безопасности
    networks:
      - seedance_network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker (для генерации видео)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seedance_celery_worker
    restart: unless-stopped
    command: celery -A bot.tasks worker --loglevel=info --concurrency=2 --queues=video_generation,default
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    depends_on:
      - redis
      - postgres
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    networks:
      - seedance_network

  # Celery Beat (для периодических задач)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: seedance_celery_beat
    restart: unless-stopped
    command: celery -A bot.tasks beat --loglevel=info --schedule=/app/celerybeat/celerybeat-schedule
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - celerybeat_data:/app/celerybeat
    networks:
      - seedance_network

  # PostgreSQL Backup
  postgres_backup:
    image: postgres:16-alpine
    container_name: seedance_postgres_backup
    restart: unless-stopped
    environment:
      - PGUSER=${DB_USER:-seedance}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME:-seedance_bot}
      - PGHOST=postgres
    volumes:
      - ./backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        echo '0 3 * * * /backup.sh' > /etc/crontabs/root &&
        crond -f -d 8
      "
    depends_on:
      - postgres
    networks:
      - seedance_network



networks:
  seedance_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celerybeat_data:
    driver: local 