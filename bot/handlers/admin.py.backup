import logging
import asyncio
from datetime import datetime, timedelta
from typing import Union, Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, func

from bot.handlers.base import BaseHandler
from bot.keyboard.inline import (
    get_admin_keyboard, get_cancel_keyboard, get_backup_keyboard,
    get_backup_list_keyboard, get_backup_info_keyboard
)
from bot.utils.messages import MessageTemplates
from services.database import db
from services.api_monitor import api_monitor
from services.backup_service import backup_service
from core.config import settings
from models.models import User, AdminLog, Generation, Transaction, SupportTicket
from core.constants import GenerationStatus

logger = logging.getLogger(__name__)

class AdminStates(StatesGroup):
    broadcast_message = State()
    give_credits_user = State()
    give_credits_amount = State()
    user_search = State()
    backup_description = State()
    backup_restore_confirm = State()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏
    price_edit_stars = State()
    price_edit_rub = State()
    price_edit_note = State()

router = Router(name="admin")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"""
    async def wrapper(update: Union[Message, CallbackQuery], *args, **kwargs):
        if update.from_user.id not in settings.ADMIN_IDS:
            if isinstance(update, CallbackQuery):
                await update.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            else:
                await update.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        return await func(update, *args, **kwargs)
    return wrapper

@router.message(F.text == "/admin")
@admin_only
async def admin_panel(message: Message, **kwargs):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user, _ = await BaseHandler.get_user_and_translator(message)
    if not user:
        return
    
    await message.answer(
        f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(user.language_code or 'ru')
    )

@router.callback_query(F.data == "admin_stats")
@admin_only
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        stats = await db.get_bot_statistics()
        
        text = format_stats_message(stats)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")
        builder.button(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è", callback_data="admin_detailed_stats")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await BaseHandler.answer_callback(callback)
        
    except Exception as e:
        logger.error(f"Error loading admin stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_menu")
@admin_only
async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    await callback.message.edit_text(
        f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(user.language_code or 'ru')
    )
    await BaseHandler.answer_callback(callback)

@router.callback_query(F.data == "admin_broadcast")
@admin_only
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    await callback.message.edit_text(
        "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=InlineKeyboardBuilder()
            .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
            .as_markup()
    )
    
    await state.set_state(AdminStates.broadcast_message)
    await BaseHandler.answer_callback(callback)

@router.message(AdminStates.broadcast_message)
@admin_only
async def handle_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.update_data(broadcast_message=message.message_id)
    
    users_count = await db.get_users_count()
    
    confirm_text = f"""
üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {users_count}
–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.

‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast_confirm")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
    builder.adjust(1)
    
    await message.answer(confirm_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "broadcast_confirm")
@admin_only
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    broadcast_message_id = data.get("broadcast_message")
    
    if not broadcast_message_id:
        await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    await callback.message.edit_text("üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>")
    
    success_count = await broadcast_to_users(
        callback.bot,
        callback.from_user.id,
        broadcast_message_id
    )
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}",
        reply_markup=InlineKeyboardBuilder()
            .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
            .as_markup()
    )
    
    await state.clear()

@router.callback_query(F.data == "admin_give_credits")
@admin_only
async def give_credits(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–¥–∞—á—É –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    await callback.message.edit_text(
        "üí∞ <b>–í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ @username:",
        reply_markup=InlineKeyboardBuilder()
            .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
            .as_markup()
    )
    
    await state.set_state(AdminStates.give_credits_user)
    await BaseHandler.answer_callback(callback)

@router.message(AdminStates.give_credits_user)
@admin_only
async def handle_give_credits_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    user = await find_user_by_input(message.text.strip())
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardBuilder()
                .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
                .as_markup()
        )
        return
    
    await state.update_data(target_user_id=user.id)
    
    await message.answer(
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω</b>\n\n"
        f"–ò–º—è: {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ):",
        reply_markup=InlineKeyboardBuilder()
            .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
            .as_markup()
    )
    
    await state.set_state(AdminStates.give_credits_amount)

@router.message(AdminStates.give_credits_amount)
@admin_only
async def handle_give_credits_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        amount = int(message.text.strip())
        
        if amount == 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Ä–∞–≤–Ω–æ 0")
            return
        
        data = await state.get_data()
        target_user_id = data.get("target_user_id")
        
        success = await process_credits_change(
            target_user_id,
            amount,
            message.from_user.id,
            message.bot
        )
        
        if success:
            await message.answer(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤",
                reply_markup=InlineKeyboardBuilder()
                    .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
                    .as_markup()
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    finally:
        await state.clear()

@router.callback_query(F.data == "admin_api_balance")
@admin_only
async def check_api_balance(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å API"""
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å API...")
        
        balance_check = await api_monitor.check_and_notify(callback.bot)
        
        text = format_api_balance_message(balance_check)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_api_balance")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
        builder.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Error checking API balance: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞", show_alert=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def find_user_by_input(user_input: str) -> Optional[User]:
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username"""
    if user_input.isdigit():
        return await db.get_user_by_telegram_id(int(user_input))
    elif user_input.startswith('@'):
        return await db.get_user_by_username(user_input[1:])
    return None

async def broadcast_to_users(bot, admin_id: int, message_id: int) -> int:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    users = await db.get_all_users()
    success_count = 0
    
    for user in users:
        try:
            await bot.copy_message(
                chat_id=user.telegram_id,
                from_chat_id=admin_id,
                message_id=message_id
            )
            success_count += 1
            await asyncio.sleep(0.05)  # –ê–Ω—Ç–∏—Ñ–ª—É–¥
        except Exception as e:
            logger.error(f"Broadcast error for user {user.telegram_id}: {e}")
    
    return success_count

async def process_credits_change(
    user_id: int,
    amount: int,
    admin_id: int,
    bot
) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db.async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                return False
            
            old_balance = user.balance
            user.balance = max(0, user.balance + amount)
            
            if amount > 0:
                user.total_bought += amount
            else:
                user.total_spent += abs(amount)
            
            await session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db.log_admin_action(
                admin_id=admin_id,
                action="give_credits",
                target_user_id=user.telegram_id,
                details=f"Amount: {amount}, Balance: {old_balance} -> {user.balance}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {amount:+d} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                text += f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                await bot.send_message(user.telegram_id, text)
            except:
                pass
            
            return True
            
    except Exception as e:
        logger.error(f"Error changing user balance: {e}")
        return False

def format_stats_message(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    return f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚îú –í—Å–µ–≥–æ: {stats['users']['total']}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['users']['active_today']}
‚îî –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['users']['new_today']}

üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚îú –í—Å–µ–≥–æ: {stats['generations']['total']}
‚îú –°–µ–≥–æ–¥–Ω—è: {stats['generations']['today']}
‚îî –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['generations']['pending']}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚îú –î–æ—Ö–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è: {stats['finance']['revenue_today']} Stars
‚îî –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {stats['finance']['total_revenue']} Stars
"""

def format_api_balance_message(balance_check: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ API"""
    balance = balance_check.get('balance')
    status = balance_check.get('status')
    
    if balance is None:
        return "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ API</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    
    status_info = {
        'critical': ('üö®', '–ö–†–ò–¢–ò–ß–ù–û', '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!'),
        'low': ('‚ö†Ô∏è', '–ù–ò–ó–ö–ò–ô', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.'),
        'normal': ('‚úÖ', '–ù–û–†–ú–ê', '–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.')
    }
    
    emoji, status_text, advice = status_info.get(status, ('‚ùì', '–ù–ï–ò–ó–í–ï–°–¢–ù–û', ''))
    
    return f"""
{emoji} <b>–ë–∞–ª–∞–Ω—Å API: {status_text}</b>

üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${balance}
üìÖ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üéØ <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>
‚îú –ö—Ä–∏—Ç–∏—á–Ω—ã–π: ${api_monitor.critical_balance_threshold}
‚îî –ù–∏–∑–∫–∏–π: ${api_monitor.low_balance_threshold}

{advice}
"""

# === BACKUP HANDLERS ===

@router.callback_query(F.data == "admin_backup")
@admin_only
async def backup_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞–º–∏"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    stats = await backup_service.get_backup_stats()
    
    text = f"""
üíæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤: {stats['total_count']}
‚îú –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.1f} MB
‚îî –ü–∞–ø–∫–∞: <code>{stats['backup_dir']}</code>
"""
    
    if stats['latest_backup']:
        latest = stats['latest_backup']
        text += f"\nüïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø:</b> {latest['created_at'].strftime('%d.%m.%Y %H:%M:%S')}"
    
    await callback.message.edit_text(
        text=text,
        reply_markup=get_backup_keyboard(user.language_code or 'ru')
    )

@router.callback_query(F.data == "backup_create")
@admin_only
async def backup_create(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    await callback.message.edit_text(
        text="üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±—ç–∫–∞–ø–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=get_cancel_keyboard(user.language_code or 'ru')
    )
    
    await state.set_state(AdminStates.backup_description)

@router.message(AdminStates.backup_description)
@admin_only
async def backup_create_with_description(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    user, _ = await BaseHandler.get_user_and_translator(message)
    if not user:
        return
    
    await state.clear()
    
    description = None if message.text == "/skip" else message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
    status_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        success, result_msg, file_path = await backup_service.create_backup(description)
        
        if success:
            await status_msg.edit_text(
                text=result_msg,
                reply_markup=get_backup_keyboard(user.language_code or 'ru')
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            await BaseHandler.log_admin_action(
                user.user_id,
                "backup_create",
                {"description": description, "file_path": file_path}
            )
        else:
            await status_msg.edit_text(
                text=f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞</b>\n\n{result_msg}",
                reply_markup=get_backup_keyboard(user.language_code or 'ru')
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}", exc_info=True)
        await status_msg.edit_text(
            text=f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n{str(e)}",
            reply_markup=get_backup_keyboard(user.language_code or 'ru')
        )

@router.callback_query(F.data == "backup_list")
@admin_only
async def backup_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    await callback.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤...")
    
    try:
        backups = await backup_service.list_backups()
        
        if not backups:
            await callback.message.edit_text(
                text="üìÅ <b>–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –ø—É—Å—Ç</b>\n\n–ë—ç–∫–∞–ø—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.",
                reply_markup=get_backup_keyboard(user.language_code or 'ru')
            )
            return
        
        text = f"üìÅ <b>–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤</b> (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
        
        for i, backup in enumerate(backups[:10], 1):
            created_at = backup['created_at'].strftime('%d.%m.%Y %H:%M')
            size_mb = backup['size_mb']
            description = backup.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:30]
            
            text += f"{i}. <b>{backup['filename']}</b>\n"
            text += f"   üìÖ {created_at} | üíæ {size_mb:.1f} MB\n"
            text += f"   üìù {description}\n\n"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_backup_list_keyboard(backups, user.language_code or 'ru')
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}")
        await callback.message.edit_text(
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞</b>\n\n{str(e)}",
            reply_markup=get_backup_keyboard(user.language_code or 'ru')
        )

@router.callback_query(F.data.startswith("backup_info_"))
@admin_only
async def backup_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±—ç–∫–∞–ø–µ"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    filename = callback.data.replace("backup_info_", "")
    
    try:
        backups = await backup_service.list_backups()
        backup = next((b for b in backups if b['filename'] == filename), None)
        
        if not backup:
            await callback.answer("‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = f"""
üìÑ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ</b>

üìÅ <b>–§–∞–π–ª:</b> <code>{backup['filename']}</code>
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {backup['created_at'].strftime('%d.%m.%Y %H:%M:%S')}
üíæ <b>–†–∞–∑–º–µ—Ä:</b> {backup['size_mb']:.1f} MB
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {backup.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∏—Ç –≤—Å—é —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!
"""
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_backup_info_keyboard(filename, user.language_code or 'ru')
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—ç–∫–∞–ø–µ: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("backup_delete_"))
@admin_only
async def backup_delete(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    filename = callback.data.replace("backup_delete_", "")
    
    try:
        success, message = await backup_service.delete_backup(filename)
        
        if success:
            await callback.answer("‚úÖ –ë—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            await BaseHandler.log_admin_action(
                user.user_id,
                "backup_delete", 
                {"filename": filename}
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            await backup_list(callback)
        else:
            await callback.answer(f"‚ùå {message}", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("backup_restore_"))
@admin_only
async def backup_restore(callback: CallbackQuery, state: FSMContext):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    filename = callback.data.replace("backup_restore_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(restore_filename=filename)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
    try:
        backups = await backup_service.list_backups()
        backup = next((b for b in backups if b['filename'] == filename), None)
        
        if not backup:
            await callback.answer("‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        await callback.message.edit_text(
            text=f"""
‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø!</b>

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ò–¢–¨ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:

üìÅ <b>–§–∞–π–ª –±—ç–∫–∞–ø–∞:</b> <code>{filename}</code>
üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {backup['created_at'].strftime('%d.%m.%Y %H:%M:%S')}
üíæ <b>–†–∞–∑–º–µ—Ä:</b> {backup['size_mb']:.1f} MB
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {backup.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}

üö® <b>–≠–¢–û –ù–ï–û–ë–†–ê–¢–ò–ú–û –ü–†–ò–í–ï–î–ï–¢ –ö:</b>
‚Ä¢ –ü–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω–µ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ—Ç–µ—Ä–µ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ—Ç–µ—Ä–µ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ {backup['created_at'].strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏

‚ö†Ô∏è <b>–ü–ï–†–ï–î –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï–ú:</b>
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î!
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –±—ç–∫–∞–ø!
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ: <code>–í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ {filename}</code>

‚ùå –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞.
""",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="backup_list"
            ).as_markup()
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(AdminStates.backup_restore_confirm)
        
    except Exception as e:
        logger.error(f"Error preparing backup restore: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(AdminStates.backup_restore_confirm)
@admin_only
async def backup_restore_confirm(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    user, _ = await BaseHandler.get_user_and_translator(message)
    if not user:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    filename = data.get('restore_filename')
    
    if not filename:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞
    expected_text = f"–í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ {filename}"
    if message.text.strip() != expected_text:
        await message.answer(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!</b>\n\n"
            f"–û–∂–∏–¥–∞–µ—Ç—Å—è: <code>{expected_text}</code>\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: <code>{message.text}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    await message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
    
    try:
        success, backup_msg, backup_path = await backup_service.create_backup(
            f"–ê–≤—Ç–æ–±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º {filename}"
        )
        
        if not success:
            await message.answer(
                f"‚ùå <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—â–∏—Ç–Ω—ã–π –±—ç–∫–∞–ø: {backup_msg}\n\n"
                f"üö´ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –û–¢–ú–ï–ù–ï–ù–û –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö!"
            )
            return
        
        await message.answer(f"‚úÖ –ó–∞—â–∏—Ç–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: <code>{backup_path}</code>")
        
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!</b>\n\n"
            f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—â–∏—Ç–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {str(e)}\n\n"
            f"üö´ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –û–¢–ú–ï–ù–ï–ù–û!"
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    status_msg = await message.answer("‚è≥ <b>–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•...</b>\n\n‚ö†Ô∏è –ù–ï –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ô–¢–ï –ë–û–¢–ê!")
    
    try:
        success, result_msg = await backup_service.restore_backup(filename)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            await BaseHandler.log_admin_action(
                user.user_id,
                "backup_restore",
                {
                    "filename": filename,
                    "admin_id": user.user_id,
                    "admin_username": message.from_user.username,
                    "timestamp": datetime.now().isoformat()
                }
            )
            
            await status_msg.edit_text(
                f"‚úÖ <b>–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!</b>\n\n"
                f"{result_msg}\n\n"
                f"üìÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª:</b> {filename}\n"
                f"üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> @{message.from_user.username or 'Unknown'}\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                f"üîÑ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î.</b>",
                reply_markup=get_backup_keyboard(user.language_code or 'ru')
            )
            
        else:
            await status_msg.edit_text(
                f"‚ùå <b>–û–®–ò–ë–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø!</b>\n\n"
                f"{result_msg}\n\n"
                f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.\n"
                f"‚úÖ –ó–∞—â–∏—Ç–Ω—ã–π –±—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <code>{backup_path}</code>",
                reply_markup=get_backup_keyboard(user.language_code or 'ru')
            )
            
    except Exception as e:
        logger.error(f"Critical error during backup restore: {e}", exc_info=True)
        await status_msg.edit_text(
            f"‚ùå <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø!</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            f"üíæ –°—Ç–∞—Ç—É—Å –ë–î –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω!\n"
            f"‚úÖ –ó–∞—â–∏—Ç–Ω—ã–π –±—ç–∫–∞–ø: <code>{backup_path}</code>\n\n"
            f"üö® –°–†–û–ß–ù–û –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=get_backup_keyboard(user.language_code or 'ru')
        )

@router.callback_query(F.data == "backup_stats")
@admin_only
async def backup_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    try:
        stats = await backup_service.get_backup_stats()
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤</b>

üìÅ <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤: {stats['total_count']}
‚îú –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']:.1f} MB
‚îî –ü–∞–ø–∫–∞: <code>{stats['backup_dir']}</code>

"""
        
        if stats['latest_backup']:
            latest = stats['latest_backup']
            text += f"""üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø:</b>
‚îú –§–∞–π–ª: {latest['filename'][:30]}...
‚îú –†–∞–∑–º–µ—Ä: {latest['size_mb']:.1f} MB
‚îú –°–æ–∑–¥–∞–Ω: {latest['created_at'].strftime('%d.%m.%Y %H:%M:%S')}
‚îî –û–ø–∏—Å–∞–Ω–∏–µ: {latest.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}

"""
        
        if stats['oldest_backup']:
            oldest = stats['oldest_backup']
            text += f"""üìÖ <b>–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π:</b>
‚îú –§–∞–π–ª: {oldest['filename'][:30]}...
‚îî –°–æ–∑–¥–∞–Ω: {oldest['created_at'].strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        await callback.message.edit_text(
            text=text,
            reply_markup=get_backup_keyboard(user.language_code or 'ru')
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n{str(e)}",
            reply_markup=get_backup_keyboard(user.language_code or 'ru')
        )

@router.callback_query(F.data == "backup_cleanup")
@admin_only
async def backup_cleanup(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    await callback.answer("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...")
    
    try:
        deleted_count, message = await backup_service.cleanup_old_backups(days=30)
        
        await callback.message.edit_text(
            text=message,
            reply_markup=get_backup_keyboard(user.language_code or 'ru')
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        await BaseHandler.log_admin_action(
            user.user_id,
            "backup_cleanup",
            {"deleted_count": deleted_count}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤: {e}")
        await callback.message.edit_text(
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏</b>\n\n{str(e)}",
            reply_markup=get_backup_keyboard(user.language_code or 'ru')
        )

@router.message(AdminStates.backup_restore_confirm, F.text.in_(["/cancel", "–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∞", "–û–¢–ú–ï–ù–ê"]))
@admin_only
async def cancel_backup_restore(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞"""
    await state.clear()
    user, _ = await BaseHandler.get_user_and_translator(message)
    
    await message.answer(
        "‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤.",
        reply_markup=get_backup_keyboard(user.language_code or 'ru')
    )

# ===============================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–ù–ê–ú–ò
# ===============================

@router.callback_query(F.data == "admin_prices")
@admin_only
async def show_price_management(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    
    text = """
üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å —Ü–µ–Ω—ã –¥–ª—è Stars –∏ –Æ–ö–∞—Å—Å—ã
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Æ–ö–∞—Å—Å–æ–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    from bot.keyboard.inline import get_price_management_keyboard
    
    await callback.message.edit_text(
        text,
        reply_markup=get_price_management_keyboard(user.language_code or 'ru')
    )
    await callback.answer()

@router.callback_query(F.data == "price_view")
@admin_only
async def show_current_prices(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"""
    try:
        from services.price_service import price_service
        from core.constants import CREDIT_PACKAGES
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –∏–∑ –ë–î
        prices = await price_service.get_package_prices()
        
        text = "üí∞ <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–∞–∫–µ—Ç–æ–≤</b>\n\n"
        
        for package in CREDIT_PACKAGES:
            package_data = prices.get(package.id, {})
            
            # –¶–µ–Ω–∞ –≤ Stars
            stars_price = package_data.get("stars_price", package.stars)
            stars_status = "üí° –∫–∞—Å—Ç–æ–º–Ω–∞—è" if package_data.get("id") else "üìã –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è"
            
            # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
            rub_price = package_data.get("rub_price")
            rub_text = f"{rub_price:.2f} ‚ÇΩ" if rub_price else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            
            text += f"{package.emoji} <b>{package.name}</b>\n"
            text += f"   üé¨ {package.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            text += f"   ‚≠ê {stars_price} Stars ({stars_status})\n"
            text += f"   üí≥ {rub_text}\n\n"
        
        # –°—Ç–∞—Ç—É—Å –Æ–ö–∞—Å—Å—ã
        from services.yookassa_service import yookassa_service
        yookassa_status = "‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞" if yookassa_service.is_available() else "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        text += f"üè™ <b>–Æ–ö–∞—Å—Å–∞:</b> {yookassa_status}\n"
        
        from bot.keyboard.inline import get_price_management_keyboard
        user, _ = await BaseHandler.get_user_and_translator(callback)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_price_management_keyboard(user.language_code or 'ru')
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing prices: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω", show_alert=True)

@router.callback_query(F.data == "price_edit")
@admin_only
async def show_package_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    
    text = """
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:
"""
    
    from bot.keyboard.inline import get_package_edit_keyboard
    
    await callback.message.edit_text(
        text,
        reply_markup=get_package_edit_keyboard(user.language_code or 'ru')
    )
    await callback.answer()

@router.callback_query(F.data.startswith("price_edit_"))
@admin_only
async def show_package_edit_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞"""
    package_id = callback.data.split("_", 2)[2]
    
    try:
        from services.price_service import price_service
        from core.constants import CREDIT_PACKAGES
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–∞–∫–µ—Ç
        package = next((p for p in CREDIT_PACKAGES if p.id == package_id), None)
        if not package:
            await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        prices = await price_service.get_package_prices(package_id)
        price_data = prices.get(package_id, {})
        
        # –¶–µ–Ω—ã
        stars_price = price_data.get("stars_price", package.stars)
        rub_price = price_data.get("rub_price")
        notes = price_data.get("notes", "")
        is_custom = price_data.get("id") is not None
        
        text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞</b>

{package.emoji} <b>{package.name}</b>
üé¨ {package.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

<b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:</b>
‚≠ê Stars: {stars_price} {"(–∫–∞—Å—Ç–æ–º–Ω–∞—è)" if is_custom else "(–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è)"}
üí≥ –†—É–±–ª–∏: {f"{rub_price:.2f} ‚ÇΩ" if rub_price else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}

<b>–ó–∞–º–µ—Ç–∫–∏:</b> {notes or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        
        from bot.keyboard.inline import get_price_edit_options_keyboard
        user, _ = await BaseHandler.get_user_and_translator(callback)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_price_edit_options_keyboard(package_id, user.language_code or 'ru')
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing package edit options: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data.startswith("price_stars_"))
@admin_only
async def start_edit_stars_price(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ Stars"""
    package_id = callback.data.split("_", 2)[2]
    
    from core.constants import CREDIT_PACKAGES
    package = next((p for p in CREDIT_PACKAGES if p.id == package_id), None)
    if not package:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º package_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(package_id=package_id)
    await state.set_state(AdminStates.price_edit_stars)
    
    text = f"""
‚≠ê <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ Telegram Stars</b>

{package.emoji} <b>{package.name}</b> ({package.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤)

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ Stars:
(—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {package.stars} Stars)

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.
"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.price_edit_stars)
@admin_only
async def process_stars_price_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ Stars"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        stars_price = int(message.text.strip())
        
        if stars_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        if stars_price > 10000:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 10000 Stars)")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        package_id = data.get("package_id")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        from services.price_service import price_service
        success, message_text = await price_service.update_package_price(
            package_id=package_id,
            stars_price=stars_price,
            admin_id=message.from_user.id
        )
        
        if success:
            await message.answer(f"‚úÖ {message_text}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–ø—Ü–∏—è–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from bot.keyboard.inline import get_price_edit_options_keyboard
            user, _ = await BaseHandler.get_user_and_translator(message)
            
            await message.answer(
                "–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_price_edit_options_keyboard(package_id, user.language_code or 'ru')
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {message_text}")
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error processing stars price edit: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await state.clear()

@router.callback_query(F.data.startswith("price_rub_"))
@admin_only
async def start_edit_rub_price(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö"""
    package_id = callback.data.split("_", 2)[2]
    
    from core.constants import CREDIT_PACKAGES
    package = next((p for p in CREDIT_PACKAGES if p.id == package_id), None)
    if not package:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º package_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(package_id=package_id)
    await state.set_state(AdminStates.price_edit_rub)
    
    text = f"""
üí≥ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö (–Æ–ö–∞—Å—Å–∞)</b>

{package.emoji} <b>{package.name}</b> ({package.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤)

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:
–ù–∞–ø—Ä–∏–º–µ—Ä: 150.50

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.
"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.price_edit_rub)
@admin_only
async def process_rub_price_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö"""
    try:
        from decimal import Decimal
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        rub_price = Decimal(message.text.strip().replace(",", "."))
        
        if rub_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        if rub_price > 100000:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 100000 ‚ÇΩ)")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        package_id = data.get("package_id")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        from services.price_service import price_service
        success, message_text = await price_service.update_package_price(
            package_id=package_id,
            rub_price=rub_price,
            admin_id=message.from_user.id
        )
        
        if success:
            await message.answer(f"‚úÖ {message_text}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–ø—Ü–∏—è–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from bot.keyboard.inline import get_price_edit_options_keyboard
            user, _ = await BaseHandler.get_user_and_translator(message)
            
            await message.answer(
                "–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_price_edit_options_keyboard(package_id, user.language_code or 'ru')
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {message_text}")
        
        await state.clear()
        
    except (ValueError, Exception) as e:
        if isinstance(e, ValueError):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 150.50")
        else:
            logger.error(f"Error processing rub price edit: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await state.clear()

@router.callback_query(F.data.startswith("price_delete_"))
@admin_only
async def delete_custom_price(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ü–µ–Ω—É –ø–∞–∫–µ—Ç–∞"""
    package_id = callback.data.split("_", 2)[2]
    
    try:
        from services.price_service import price_service
        
        success, message_text = await price_service.delete_package_price(
            package_id=package_id,
            admin_id=callback.from_user.id
        )
        
        if success:
            await callback.answer(f"‚úÖ {message_text}", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from bot.keyboard.inline import get_price_edit_options_keyboard
            user, _ = await BaseHandler.get_user_and_translator(callback)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
            from core.constants import CREDIT_PACKAGES
            package = next((p for p in CREDIT_PACKAGES if p.id == package_id), None)
            
            text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞</b>

{package.emoji} <b>{package.name}</b>
üé¨ {package.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤

<b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:</b>
‚≠ê Stars: {package.stars} (–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è)
üí≥ –†—É–±–ª–∏: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞

<b>–ó–∞–º–µ—Ç–∫–∏:</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
            
            await callback.message.edit_text(
                text,
                reply_markup=get_price_edit_options_keyboard(package_id, user.language_code or 'ru')
            )
        else:
            await callback.answer(f"‚ùå {message_text}", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error deleting custom price: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "price_yookassa")
@admin_only
async def show_yookassa_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Æ–ö–∞—Å—Å—ã"""
    try:
        from services.yookassa_service import yookassa_service
        from core.config import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Æ–ö–∞—Å—Å—ã
        is_configured = yookassa_service.is_available()
        
        shop_id_status = "‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if settings.YOOKASSA_SHOP_ID else "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        secret_status = "‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if settings.YOOKASSA_SECRET_KEY else "‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        enabled_status = "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if settings.ENABLE_YOOKASSA else "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        text = f"""
üí≥ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Æ–ö–∞—Å—Å—ã</b>

<b>–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</b> {"‚úÖ —Ä–∞–±–æ—Ç–∞–µ—Ç" if is_configured else "‚ùå –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"}

<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ Shop ID: {shop_id_status}
‚Ä¢ Secret Key: {secret_status}  
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∞: {enabled_status}

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
–î–ª—è —Ä–∞–±–æ—Ç—ã –Æ–ö–∞—Å—Å—ã –¥–æ–±–∞–≤—å—Ç–µ –≤ .env.client:

<code>YOOKASSA_SHOP_ID=–≤–∞—à_shop_id
YOOKASSA_SECRET_KEY=–≤–∞—à_secret_key
ENABLE_YOOKASSA=true</code>

<b>Webhook URL:</b>
{settings.YOOKASSA_WEBHOOK_ENDPOINT or "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç URL –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Æ–ö–∞—Å—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö.
"""
        
        from bot.keyboard.inline import get_price_management_keyboard
        user, _ = await BaseHandler.get_user_and_translator(callback)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_price_management_keyboard(user.language_code or 'ru')
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing YooKassa settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data == "price_history")
@admin_only
async def show_price_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω"""
    try:
        from services.price_service import price_service
        
        history = await price_service.get_price_history()
        
        if not history:
            text = "üìà <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</b>\n\n–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –¶–µ–Ω—ã –µ—â–µ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∏—Å—å."
        else:
            text = "üìà <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</b>\n\n"
            
            for record in history[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
                status = "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞" if record["is_active"] else "‚ùå —É–¥–∞–ª–µ–Ω–∞"
                stars_price = record.get("stars_price", "‚Äî")
                rub_price = f"{record['rub_price']:.2f} ‚ÇΩ" if record.get("rub_price") else "‚Äî"
                date = record["updated_at"].strftime("%d.%m.%Y %H:%M") if record.get("updated_at") else "‚Äî"
                
                text += f"üì¶ <b>{record['package_id']}</b> ({status})\n"
                text += f"   ‚≠ê {stars_price} Stars | üí≥ {rub_price}\n"
                text += f"   üìÖ {date}\n"
                if record.get("notes"):
                    text += f"   üìù {record['notes'][:50]}{'...' if len(record['notes']) > 50 else ''}\n"
                text += "\n"
        
        from bot.keyboard.inline import get_price_management_keyboard
        user, _ = await BaseHandler.get_user_and_translator(callback)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_price_management_keyboard(user.language_code or 'ru')
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing price history: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)

@router.callback_query(F.data == "admin_panel")
@admin_only  
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user, _ = await BaseHandler.get_user_and_translator(callback)
    if not user:
        return
    
    await callback.message.edit_text(
        f"üëë \u003cb\u003e–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\u003c/b\u003e\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard(user.language_code or 'ru')
    )
    await BaseHandler.answer_callback(callback)