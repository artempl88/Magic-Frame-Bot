import logging
import io
import csv
from datetime import datetime, timedelta
from typing import List, Dict

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.database import db
from services.utm_analytics import utm_service
from bot.middlewares.auth import admin_required
from bot.middlewares.i18n import i18n

logger = logging.getLogger(__name__)

router = Router(name="utm_admin")

class UTMStates(StatesGroup):
    creating_campaign = State()
    entering_name = State()
    entering_source = State()
    entering_medium = State()
    entering_campaign = State()
    entering_content = State()
    entering_description = State()
    viewing_analytics = State()

# =================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ UTM ===================

@router.callback_query(F.data == "utm_analytics")
@admin_required
async def show_utm_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é UTM –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    text = f"""
üß© <b>UTM –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>

üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π:
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UTM-—Å—Å—ã–ª–æ–∫
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º

üí° <i>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.</i>
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="utm_create_campaign")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π", callback_data="utm_list_campaigns")
    builder.button(text="üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="utm_general_analytics")
    builder.button(text="üèÜ –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="utm_top_sources")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
    builder.adjust(2, 2, 1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()

# =================== –°–û–ó–î–ê–ù–ò–ï –ö–ê–ú–ü–ê–ù–ò–ò ===================

@router.callback_query(F.data == "utm_create_campaign")
@admin_required
async def start_create_campaign(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è UTM –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 1 –∏–∑ 6: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏</b>

–í–≤–µ–¥–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏.
–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ.

<i>–ü—Ä–∏–º–µ—Ä: "–õ–µ—Ç–Ω—è—è –∞–∫—Ü–∏—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"</i>
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_name)
    await callback.answer()

@router.message(UTMStates.entering_name)
async def enter_campaign_name(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    if len(message.text) > 200:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await state.update_data(name=message.text)
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 2 –∏–∑ 6: UTM Source</b>

–£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_source).

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>vk</code> - –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
‚Ä¢ <code>telegram</code> - Telegram
‚Ä¢ <code>youtube</code> - YouTube
‚Ä¢ <code>instagram</code> - Instagram
‚Ä¢ <code>google</code> - Google Ads
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="vk", callback_data="utm_source_vk")
    builder.button(text="telegram", callback_data="utm_source_telegram")
    builder.button(text="youtube", callback_data="utm_source_youtube")
    builder.button(text="instagram", callback_data="utm_source_instagram")
    builder.button(text="‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="utm_source_custom")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    builder.adjust(2, 2, 1, 1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_source)

@router.callback_query(UTMStates.entering_source, F.data.startswith("utm_source_"))
async def select_utm_source(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä UTM source"""
    
    source_type = callback.data.split("_")[-1]
    
    if source_type == "custom":
        text = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_source):"
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer()
        return
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    await state.update_data(utm_source=source_type)
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 3 –∏–∑ 6: UTM Medium</b>

–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{source_type}</code>

–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_medium).

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>cpc</code> - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
‚Ä¢ <code>banner</code> - –ë–∞–Ω–Ω–µ—Ä–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
‚Ä¢ <code>post</code> - –ü–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç–∏
‚Ä¢ <code>story</code> - –°—Ç–æ—Ä–∏–∑
‚Ä¢ <code>email</code> - Email —Ä–∞—Å—Å—ã–ª–∫–∞
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="cpc", callback_data="utm_medium_cpc")
    builder.button(text="banner", callback_data="utm_medium_banner")
    builder.button(text="post", callback_data="utm_medium_post")
    builder.button(text="story", callback_data="utm_medium_story")
    builder.button(text="‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="utm_medium_custom")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    builder.adjust(2, 2, 1, 1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_medium)
    await callback.answer()

@router.message(UTMStates.entering_source)
async def enter_custom_source(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    
    if len(message.text) > 100:
        await message.answer("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    source = message.text.lower().replace(' ', '_')
    await state.update_data(utm_source=source)
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 3 –∏–∑ 6: UTM Medium</b>

–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{source}</code>

–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_medium).
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="cpc", callback_data="utm_medium_cpc")
    builder.button(text="banner", callback_data="utm_medium_banner") 
    builder.button(text="post", callback_data="utm_medium_post")
    builder.button(text="story", callback_data="utm_medium_story")
    builder.button(text="‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="utm_medium_custom")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    builder.adjust(2, 2, 1, 1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_medium)

@router.callback_query(UTMStates.entering_medium, F.data.startswith("utm_medium_"))
async def select_utm_medium(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä UTM medium"""
    
    medium_type = callback.data.split("_")[-1]
    
    if medium_type == "custom":
        text = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_medium):"
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer()
        return
    
    await state.update_data(utm_medium=medium_type)
    data = await state.get_data()
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 4 –∏–∑ 6: UTM Campaign</b>

–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{data['utm_source']}</code>
–¢–∏–ø: <code>{medium_type}</code>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ (utm_campaign).

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>summer_sale_2024</code>
‚Ä¢ <code>new_year_promo</code>
‚Ä¢ <code>black_friday</code>

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.</i>
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_campaign)
    await callback.answer()

@router.message(UTMStates.entering_medium)
async def enter_custom_medium(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ medium"""
    
    if len(message.text) > 100:
        await message.answer("‚ùå –¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    medium = message.text.lower().replace(' ', '_')
    await state.update_data(utm_medium=medium)
    data = await state.get_data()
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 4 –∏–∑ 6: UTM Campaign</b>

–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{data['utm_source']}</code>
–¢–∏–ø: <code>{medium}</code>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ (utm_campaign).
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_campaign)

@router.message(UTMStates.entering_campaign)
async def enter_utm_campaign(message: Message, state: FSMContext):
    """–í–≤–æ–¥ UTM campaign"""
    
    if len(message.text) > 200:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    campaign = message.text.lower().replace(' ', '_')
    await state.update_data(utm_campaign=campaign)
    data = await state.get_data()
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 5 –∏–∑ 6: UTM Content (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>

–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{data['utm_source']}</code>
–¢–∏–ø: <code>{data['utm_medium']}</code>
–ö–∞–º–ø–∞–Ω–∏—è: <code>{campaign}</code>

–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (utm_content).

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>banner_top</code> - –í–µ—Ä—Ö–Ω–∏–π –±–∞–Ω–Ω–µ—Ä
‚Ä¢ <code>button_cta</code> - CTA –∫–Ω–æ–ø–∫–∞
‚Ä¢ <code>link_bio</code> - –°—Å—ã–ª–∫–∞ –≤ –±–∏–æ

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ.
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="utm_skip_content")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_content)

@router.callback_query(UTMStates.entering_content, F.data == "utm_skip_content")
async def skip_utm_content(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ UTM content"""
    await ask_for_description(callback, state)

@router.message(UTMStates.entering_content)
async def enter_utm_content(message: Message, state: FSMContext):
    """–í–≤–æ–¥ UTM content"""
    
    if len(message.text) > 200:
        await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    content = message.text.lower().replace(' ', '_')
    await state.update_data(utm_content=content)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    await ask_for_description_message(message, state)

async def ask_for_description(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"""
    data = await state.get_data()
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 6 –∏–∑ 6: –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏:</b>
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: <code>{data['utm_source']}</code>
‚Ä¢ –¢–∏–ø: <code>{data['utm_medium']}</code>
‚Ä¢ –ö–∞–º–ø–∞–Ω–∏—è: <code>{data['utm_campaign']}</code>
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: <code>{data.get('utm_content', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>

–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å".
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="utm_create_final")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_description)
    await callback.answer()

async def ask_for_description_message(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)"""
    data = await state.get_data()
    
    text = f"""
‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìù <b>–®–∞–≥ 6 –∏–∑ 6: –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–ø–∞–Ω–∏–∏:</b>
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: <code>{data['utm_source']}</code>
‚Ä¢ –¢–∏–ø: <code>{data['utm_medium']}</code>
‚Ä¢ –ö–∞–º–ø–∞–Ω–∏—è: <code>{data['utm_campaign']}</code>
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: <code>{data.get('utm_content', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>

–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å".
"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="utm_create_final")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="utm_analytics")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(UTMStates.entering_description)

@router.callback_query(UTMStates.entering_description, F.data == "utm_create_final")
async def create_campaign_final(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
    await create_campaign_with_data(callback, state, None)

@router.message(UTMStates.entering_description)
async def enter_description_and_create(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    if len(message.text) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    await create_campaign_with_data(None, state, message.text, message)

async def create_campaign_with_data(callback: CallbackQuery, state: FSMContext, description: str, message: Message = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    
    data = await state.get_data()
    admin_id = (callback.from_user.id if callback else message.from_user.id)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
        campaign = await utm_service.create_utm_campaign(
            admin_id=admin_id,
            name=data['name'],
            utm_source=data['utm_source'],
            utm_medium=data['utm_medium'],
            utm_campaign=data['utm_campaign'],
            utm_content=data.get('utm_content'),
            description=description
        )
        
        text = f"""
‚úÖ <b>–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏:</b>
‚Ä¢ ID: <code>{campaign.id}</code>
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{campaign.name}</b>
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: <code>{campaign.utm_source}</code>
‚Ä¢ –¢–∏–ø: <code>{campaign.utm_medium}</code>
‚Ä¢ –ö–∞–º–ø–∞–Ω–∏—è: <code>{campaign.utm_campaign}</code>
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: <code>{campaign.utm_content or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>

üîó <b>UTM —Å—Å—ã–ª–∫–∞:</b>
<code>{campaign.utm_link}</code>

üí° <b>–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥:</b> <code>{campaign.short_code}</code>

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.</i>
"""
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"utm_view_campaign_{campaign.id}")
        builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π", callback_data="utm_list_campaigns")
        builder.button(text="‚óÄÔ∏è –ú–µ–Ω—é UTM", callback_data="utm_analytics")
        builder.adjust(1)
        
        if callback:
            await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await callback.answer("‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error creating UTM campaign: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        if callback:
            await callback.answer(error_text, show_alert=True)
        else:
            await message.answer(error_text)

# =================== –°–ü–ò–°–û–ö –ö–ê–ú–ü–ê–ù–ò–ô ===================

@router.callback_query(F.data == "utm_list_campaigns")
@admin_required
async def list_campaigns(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ UTM –∫–∞–º–ø–∞–Ω–∏–π"""
    await state.clear()
    
    try:
        campaigns = await utm_service.get_campaigns_list(limit=10)
        
        if not campaigns:
            text = """
üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π</b>

üîç –ö–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é UTM –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞.
"""
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="utm_create_campaign")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="utm_analytics")
            builder.adjust(1)
            
            await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await callback.answer()
            return
        
        text = "üìã <b>UTM –ö–∞–º–ø–∞–Ω–∏–∏</b>\n\n"
        
        builder = InlineKeyboardBuilder()
        
        for campaign in campaigns:
            status_emoji = "üü¢" if campaign.is_active else "üî¥"
            short_name = campaign.name[:30] + "..." if len(campaign.name) > 30 else campaign.name
            
            text += f"{status_emoji} <b>{short_name}</b>\n"
            text += f"   üìä {campaign.total_clicks} –∫–ª–∏–∫–æ–≤, {campaign.total_registrations} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n"
            text += f"   üè∑Ô∏è {campaign.utm_source}/{campaign.utm_medium}\n\n"
            
            builder.button(
                text=f"{status_emoji} {short_name}",
                callback_data=f"utm_view_campaign_{campaign.id}"
            )
        
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data="utm_create_campaign")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="utm_analytics")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error listing UTM campaigns: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–º–ø–∞–Ω–∏–π", show_alert=True)

# =================== –ü–†–û–°–ú–û–¢–† –ö–ê–ú–ü–ê–ù–ò–ò ===================

@router.callback_query(F.data.startswith("utm_view_campaign_"))
@admin_required
async def view_campaign(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–º–ø–∞–Ω–∏–∏"""
    await state.clear()
    
    campaign_id = int(callback.data.split("_")[-1])
    
    try:
        analytics = await utm_service.get_campaign_analytics(campaign_id)
        
        if not analytics:
            await callback.answer("‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        campaign = analytics.get('campaign', {})
        clicks = analytics.get('clicks', {})
        events = analytics.get('events', {})
        conversions = analytics.get('conversions', {})
        
        status_emoji = "üü¢" if campaign.get('is_active', False) else "üî¥"
        
        text = f"""
üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏</b>

{status_emoji} <b>{campaign.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>

üè∑Ô∏è <b>UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: <code>{campaign.get('utm_source', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>
‚Ä¢ –¢–∏–ø: <code>{campaign.get('utm_medium', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>
‚Ä¢ –ö–∞–º–ø–∞–Ω–∏—è: <code>{campaign.get('utm_campaign', '–Ω–µ —É–∫–∞–∑–∞–Ω')}</code>
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç: <code>{campaign.get('utm_content') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ üë• –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: <b>{clicks.get('total_clicks', 0)}</b>
‚Ä¢ üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{clicks.get('unique_users', 0)}</b>
‚Ä¢ üÜï –ü–µ—Ä–≤—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è: <b>{clicks.get('first_visits', 0)}</b>

üéØ <b>–°–æ–±—ã—Ç–∏—è:</b>
"""
        
        for event_type, event_data in events.items():
            event_emoji = {
                'registration': 'üìù',
                'purchase': 'üí∞',
                'generation': 'üé¨'
            }.get(event_type, 'üìä')
            
            text += f"‚Ä¢ {event_emoji} {event_type}: <b>{event_data.get('count', 0)}</b>"
            if event_data.get('total_revenue', 0) > 0:
                text += f" (üí∞ {event_data['total_revenue']:.2f}‚ÇΩ)"
            text += "\n"
        
        text += f"""
üìä <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{conversions.get('registration_rate', 0)}%</b>
‚Ä¢ –ü–æ–∫—É–ø–∫–∞: <b>{conversions.get('purchase_rate', 0)}%</b>

üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {datetime.fromisoformat(campaign.get('created_at', '2025-01-01T00:00:00')).strftime('%d.%m.%Y %H:%M') if campaign.get('created_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
"""
        
        builder = InlineKeyboardBuilder()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if campaign.get('is_active', False) else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        builder.button(text=toggle_text, callback_data=f"utm_toggle_{campaign_id}")
        
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é", callback_data=f"utm_delete_{campaign_id}")
        builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π", callback_data="utm_list_campaigns")
        builder.button(text="‚óÄÔ∏è –ú–µ–Ω—é UTM", callback_data="utm_analytics")
        builder.adjust(1, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing UTM campaign {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("utm_toggle_"))
@admin_required
async def toggle_campaign(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏"""
    
    campaign_id = int(callback.data.split("_")[-1])
    admin_id = callback.from_user.id
    
    try:
        success = await utm_service.toggle_campaign_status(campaign_id, admin_id)
        
        if success:
            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await view_campaign(callback, FSMContext())
        else:
            await callback.answer("‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error toggling UTM campaign {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

# =================== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ===================

@router.callback_query(F.data.startswith("utm_export_"))
@admin_required 
async def export_campaign_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏ –≤ CSV"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ summary —ç–∫—Å–ø–æ—Ä—Ç
    if "utm_export_summary_" in callback.data:
        return
    
    campaign_id = int(callback.data.split("_")[-1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=30)
        
        data = await utm_service.export_campaign_data(campaign_id, start_date, end_date)
        
        if not data:
            await callback.answer("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        output = io.StringIO()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
        fieldnames = [
            'f"–ö–∞–º–ø–∞–Ω–∏—è_{campaign_id}"', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_content',
            'click_id', 'clicked_at', 'click_date', 'click_hour', 'click_day_of_week',
            'telegram_id', 'username', 'first_name', 'last_name', 'language_code',
            'is_first_visit', 'is_registered_user', 'is_premium', 'user_credits_balance',
            'user_registration_date', 'user_agent', 'ip_address', 'referrer',
            'event_type', 'event_at', 'revenue', 'credits_spent', 'credits_purchased',
            'time_from_click_seconds', 'time_from_click_minutes', 'time_from_click_hours',
            'has_converted', 'conversion_type', 'export_timestamp'
        ]
        
        writer = csv.DictWriter(output, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        csv_content = output.getvalue().encode('utf-8')
        filename = f"utm_detailed_{campaign_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        file = BufferedInputFile(csv_content, filename=filename)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        campaign_name = data[0]['f"–ö–∞–º–ø–∞–Ω–∏—è_{campaign_id}"'] if data else f"Campaign {campaign_id}"
        total_clicks = len(set(row['click_id'] for row in data))
        total_events = len([row for row in data if row['event_type']])
        total_revenue = sum(float(row['revenue']) for row in data)
        
        await callback.message.answer_document(
            file,
            caption=f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìã <b>–ö–∞–º–ø–∞–Ω–∏—è:</b> {f"–ö–∞–º–ø–∞–Ω–∏—è_{campaign_id}"}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
üìù <b>–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ:</b> {len(data)}
üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–∫–æ–≤:</b> {total_clicks}
üéØ <b>–°–æ–±—ã—Ç–∏—è:</b> {total_events}
üí∞ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {total_revenue:.2f}‚ÇΩ

<i>–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–∫—É –∏ —Å–æ–±—ã—Ç–∏—é, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ç—Ä–∞—Ñ–∏–∫–∞.</i>""",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"Error exporting UTM campaign {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data == "utm_general_analytics")
@admin_required
async def show_general_analytics(callback: CallbackQuery):
    """–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=30)
        
        top_sources = await utm_service.get_top_sources_analytics(start_date, end_date, limit=5)
        
        text = f"""
üìä <b>–û–±—â–∞—è UTM –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>

üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}

üèÜ <b>–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>

"""
        
        if top_sources:
            for i, source in enumerate(top_sources, 1):
                emoji = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'][i-1]
                text += f"{emoji} <b>{source['source']}/{source['medium']}</b>\n"
                text += f"   üë• {source['clicks']} –∫–ª–∏–∫–æ–≤ ({source['unique_users']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)\n"
                text += f"   üìä {source['events']} —Å–æ–±—ã—Ç–∏–π (–∫–æ–Ω–≤–µ—Ä—Å–∏—è: {source['conversion_rate']}%)\n"
                if source['revenue'] > 0:
                    text += f"   üí∞ –í—ã—Ä—É—á–∫–∞: {source['revenue']:.2f}‚ÇΩ\n"
                text += "\n"
        else:
            text += "üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üèÜ –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="utm_top_sources")
        builder.button(text="‚óÄÔ∏è –ú–µ–Ω—é UTM", callback_data="utm_analytics")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing general UTM analytics: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data == "utm_top_sources")
@admin_required
async def show_top_sources(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7, 30 –∏ 90 –¥–Ω–µ–π
        periods = [
            (7, "7 –¥–Ω–µ–π"),
            (30, "30 –¥–Ω–µ–π"),
            (90, "90 –¥–Ω–µ–π")
        ]
        
        text = "üèÜ <b>–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\n"
        
        for days, period_name in periods:
            end_date = datetime.utcnow()
            start_date = end_date - timedelta(days=days)
            
            top_sources = await utm_service.get_top_sources_analytics(start_date, end_date, limit=3)
            
            text += f"üìÖ <b>{period_name}:</b>\n"
            
            if top_sources:
                for i, source in enumerate(top_sources, 1):
                    emoji = ['ü•á', 'ü•à', 'ü•â'][i-1]
                    text += f"{emoji} {source['source']}/{source['medium']} - {source['clicks']} –∫–ª–∏–∫–æ–≤ ({source['conversion_rate']}%)\n"
            else:
                text += "üîç –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            text += "\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="utm_general_analytics")
        builder.button(text="‚óÄÔ∏è –ú–µ–Ω—é UTM", callback_data="utm_analytics")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing top sources: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True) 
@router.callback_query(F.data.startswith("utm_delete_"))
@admin_required
async def delete_campaign(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è UTM –∫–∞–º–ø–∞–Ω–∏–∏"""
    campaign_id = int(callback.data.split("_")[-1])
    admin_id = callback.from_user.id
    
    try:
        success = await utm_service.delete_utm_campaign(campaign_id, admin_id)
        
        if success:
            await callback.answer("‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            await list_campaigns(callback, FSMContext())
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error deleting UTM campaign {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏", show_alert=True)


@router.callback_query(F.data.startswith("utm_detailed_"))
@admin_required
async def show_detailed_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    campaign_id = int(callback.data.split("_")[-1])
    
    try:
        analytics = await utm_service.get_campaign_analytics(campaign_id)
        
        if not analytics:
            await callback.answer("‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        campaign = analytics['campaign']
        timeline = analytics['timeline']
        events = analytics['events']
        
        text = f"""
üìà <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {campaign['name']}</b>

üìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏):</b>
"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        daily_stats = timeline['daily_stats'][-7:] if timeline['daily_stats'] else []
        
        if daily_stats:
            for day_data in daily_stats:
                date_obj = datetime.fromisoformat(day_data['date'])
                date_str = date_obj.strftime('%d.%m')
                weekday = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][date_obj.weekday()]
                text += f"‚Ä¢ {date_str} ({weekday}): {day_data['clicks']} –∫–ª–∏–∫–æ–≤, {day_data['unique_users']} –ø–æ–ª—å–∑.\\n"
        else:
            text += "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏\\n"
        
        text += f"\\nüïê <b>–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\\n"
        if timeline['top_hours']:
            for i, hour_data in enumerate(timeline['top_hours'], 1):
                text += f"{i}. {hour_data['hour']} - {hour_data['clicks']} –∫–ª–∏–∫–æ–≤\\n"
        else:
            text += "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Å–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\\n"
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        text += f"\\n‚è±Ô∏è <b>–í—Ä–µ–º—è –¥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b>\\n"
        for event_type, event_data in events.items():
            if event_data.get('avg_time_to_convert_minutes', 0) > 0:
                event_name = {'registration': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'purchase': '–ü–æ–∫—É–ø–∫–∞', 'generation': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è'}.get(event_type, event_type)
                text += f"‚Ä¢ {event_name}:\\n"
                text += f"  - –°—Ä–µ–¥–Ω–µ–µ: {event_data['avg_time_to_convert_minutes']:.1f} –º–∏–Ω\\n"
                text += f"  - –ú–∏–Ω–∏–º—É–º: {event_data['min_time_to_convert_seconds']//60:.0f} –º–∏–Ω\\n"
                text += f"  - –ú–∞–∫—Å–∏–º—É–º: {event_data['max_time_to_convert_seconds']//60:.0f} –º–∏–Ω\\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"utm_view_campaign_{campaign_id}")
        builder.button(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data=f"utm_export_{campaign_id}")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"utm_view_campaign_{campaign_id}")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing detailed analytics for campaign {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)

@router.callback_query(F.data.startswith("utm_export_summary_"))
@admin_required
async def export_campaign_summary(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–¥–∫–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ –≤ CSV"""
    
    campaign_id = int(callback.data.split("_")[-1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=30)
        
        data = await utm_service.export_campaign_data(campaign_id, start_date, end_date)
        
        if not data:
            await callback.answer("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV
        output = io.StringIO()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–≤–æ–¥–∫–∏
        fieldnames = [
            'f"–ö–∞–º–ø–∞–Ω–∏—è_{campaign_id}"', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_content',
            'total_clicks', 'unique_users', 'first_visits', 'registered_users_clicks', 'new_users_clicks',
            'registrations', 'purchases', 'generations', 'total_revenue',
            'revenue_per_click', 'revenue_per_user',
            'click_to_registration_rate', 'click_to_purchase_rate', 'registration_to_purchase_rate',
            'avg_time_to_convert_minutes', 'is_active', 'created_at', 'export_date'
        ]
        
        writer = csv.DictWriter(output, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        csv_content = output.getvalue().encode('utf-8')
        filename = f"utm_summary_{campaign_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        file = BufferedInputFile(csv_content, filename=filename)
        
        await callback.message.answer_document(
            file,
            caption=f"""üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìã <b>–ö–∞–º–ø–∞–Ω–∏—è:</b> {data[0]['f"–ö–∞–º–ø–∞–Ω–∏—è_{campaign_id}"']}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
üìà <b>–ö–ª–∏–∫–æ–≤:</b> {data[0]['total_clicks']}
üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö:</b> {data[0]['unique_users']}
üí∞ <b>–í—ã—Ä—É—á–∫–∞:</b> {data[0]['total_revenue']:.2f}‚ÇΩ

<i>–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–¥–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏</i>""",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –°–≤–æ–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"Error exporting UTM campaign summary {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å–≤–æ–¥–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("utm_credits_"))
@admin_required
async def show_credit_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º –∏ –ø–æ–∫—É–ø–∫–∞–º"""
    campaign_id = int(callback.data.split("_")[-1])
    
    try:
        credit_analytics = await utm_service.get_campaign_credit_analytics(campaign_id)
        
        text = f"""
üí≥ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>
üìã <b>–ö–∞–º–ø–∞–Ω–∏—è #{campaign_id}</b>

üìä <b>–°–≤–æ–¥–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: <b>{credit_analytics['summary']['total_purchases']}</b>
‚Ä¢ –ö—É–ø–ª–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: <b>{credit_analytics['summary']['total_credits_bought']}</b>
‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: <b>{credit_analytics['summary']['total_credits_spent']}</b>
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: <b>{credit_analytics['summary']['avg_purchase_amount']:.0f}</b> –∫—Ä–µ–¥–∏—Ç–æ–≤

üí∞ <b>–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ Telegram Stars: <b>{credit_analytics['total_revenue']['stars']}</b>
‚Ä¢ –Æ–ö–∞—Å—Å–∞ (—Ä—É–±–ª–∏): <b>{credit_analytics['total_revenue']['rub']:.2f}‚ÇΩ</b>

"""
        
        # –¢–æ–ø –ø–æ–∫—É–ø–∞–µ–º—ã–µ –ø–∞–∫–µ—Ç—ã
        if credit_analytics['purchase_packages']:
            text += "üèÜ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤:</b>\\n"
            for i, package in enumerate(credit_analytics['purchase_packages'][:5], 1):
                package_name = package['package_id'] or f"{package['amount']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                text += f"{i}. <b>{package_name}</b>\\n"
                text += f"   üì¶ {package['transaction_count']} –ø–æ–∫—É–ø–æ–∫"
                text += f" ‚Ä¢ {package['total_credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                if package['total_stars_paid'] > 0:
                    text += f" ‚Ä¢ ‚≠ê{package['total_stars_paid']}"
                if package['total_rub_paid'] > 0:
                    text += f" ‚Ä¢ {package['total_rub_paid']:.2f}‚ÇΩ"
                text += "\\n\\n"
        
        # –ë–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –ø–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º
        if credit_analytics['bonus_events']:
            text += "üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã:</b>\\n"
            for bonus in credit_analytics['bonus_events']:
                promo_data = bonus.get('event_data', {})
                if isinstance(promo_data, str):
                    import json
                    try:
                        promo_data = json.loads(promo_data)
                    except:
                        promo_data = {}
                
                promo_code = promo_data.get('promo_code', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                text += f"‚Ä¢ <code>{promo_code}</code>: {bonus['usage_count']}x –ø–æ {bonus['credits_amount']} –∫—Ä–µ–¥–∏—Ç–æ–≤\\n"
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ç—Ä–∞—Ç
        if credit_analytics['spending_patterns']:
            text += "\\nüí∏ <b>–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ç—Ä–∞—Ç:</b>\\n"
            for pattern in credit_analytics['spending_patterns'][:3]:
                text += f"‚Ä¢ {abs(pattern['amount'])} –∫—Ä–µ–¥–∏—Ç–æ–≤: {pattern['transaction_count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤", callback_data=f"utm_export_{campaign_id}")
        builder.button(text="üìä –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"utm_view_campaign_{campaign_id}")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"utm_view_campaign_{campaign_id}")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing credit details for campaign {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤", show_alert=True)

