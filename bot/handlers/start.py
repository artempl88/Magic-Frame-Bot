import re
import logging
from datetime import datetime, timezone
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboard.inline import get_main_menu, get_language_keyboard
from bot.utils.messages import MessageTemplates
from services.database import db
from core.config import settings
from core.constants import LANGUAGES, NEW_USER_BONUS
from bot.middlewares.i18n import i18n

logger = logging.getLogger(__name__)

router = Router(name="start")

async def determine_user_language(telegram_user) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ Telegram"""
    if not hasattr(telegram_user, 'language_code') or not telegram_user.language_code:
        return 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    
    lang_code = telegram_user.language_code.lower()
    
    # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if lang_code in LANGUAGES:
        return lang_code
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–æ–≤ —Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
    base_lang = lang_code.split('-')[0].split('_')[0]
    if base_lang in LANGUAGES:
        return base_lang
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ ru –∏ en)
    lang_mapping = {
        'en': ['en-us', 'en_us', 'en-gb', 'en_gb'],
        'ru': ['ru-ru', 'ru_ru']
    }
    
    for supported_lang, variants in lang_mapping.items():
        if lang_code in variants:
            return supported_lang
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    return 'ru'

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referrer_id = None
    if len(message.text.split()) > 1:
        ref_match = re.match(r'/start ref_(\d+)', message.text)
        if ref_match:
            potential_referrer = int(ref_match.group(1))
            if potential_referrer != user_id:  # –ù–µ–ª—å–∑—è –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
                referrer_id = potential_referrer
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    is_new_user = user is None
    
    if is_new_user:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        detected_lang = await determine_user_language(message.from_user)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–Ω—É—Å–æ–º
        user = await db.create_user(
            user_id=user_id,  # telegram_id
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=detected_lang
        )
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        _ = lambda key, **kwargs: i18n.get(key, detected_lang, **kwargs)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫—Ä–µ–¥–∏—Ç–æ–≤
        welcome_text = _("welcome.title", credits=NEW_USER_BONUS)
        
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu(detected_lang, user.balance)
        )
    else:
        # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫
        user_lang = user.language_code or 'ru'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await db.update_user_activity(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message, user)

@router.callback_query(F.data.startswith("set_language_"))
async def handle_language_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    lang_code = callback.data.split("_")[-1]
    
    if lang_code not in LANGUAGES:
        await callback.answer("Invalid language", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.update_user(callback.from_user.id, language_code=lang_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(callback.from_user.id)
    
    # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    _ = lambda key, **kwargs: i18n.get(key, lang_code, **kwargs)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    await show_main_menu(callback, user, new_message=False)
    
    await callback.answer(_("settings.language_changed"))

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer(_('errors.use_start'), show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    try:
        await callback.message.delete()
    except:
        pass
    
    await show_main_menu(callback.message, user, new_message=True)
    await callback.answer()

async def show_main_menu(message_or_callback, user, new_message: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await db.get_user_statistics(user.telegram_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = user.first_name or user.username or _("common.user", default="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if len(user_name) > 15:
        user_name = user_name[:15] + "..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è)
    is_new_user = stats.get('total_generations', 0) == 0 and user.total_bought == 0
    welcome_key = "menu.beautiful.welcome" if is_new_user else "menu.beautiful.welcome_back"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ
    last_generation = stats.get('last_generation_date')
    if last_generation:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if last_generation.tzinfo is None:
            last_generation = last_generation.replace(tzinfo=timezone.utc)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        now = datetime.now(timezone.utc)
        diff = now - last_generation
        
        if diff.days == 0:
            if diff.seconds < 3600:  # –º–µ–Ω—å—à–µ —á–∞—Å–∞
                minutes = diff.seconds // 60
                time_str = f"{minutes}{_('time.min_ago', default='–º –Ω–∞–∑–∞–¥')}"
            else:  # –º–µ–Ω—å—à–µ –¥–Ω—è
                hours = diff.seconds // 3600
                time_str = f"{hours}{_('time.hour_ago', default='—á –Ω–∞–∑–∞–¥')}"
        elif diff.days == 1:
            time_str = _("time.yesterday", default="–≤—á–µ—Ä–∞")
        else:
            time_str = f"{diff.days}{_('time.days_ago', default='–¥ –Ω–∞–∑–∞–¥')}"
    else:
        time_str = _("menu.beautiful.never")
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status = _("menu.beautiful.status_premium") if user.is_premium else _("menu.beautiful.status_active")
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"""
{_("menu.beautiful.divider")}
{_(welcome_key, name=user_name)}
{_("menu.beautiful.divider")}

{_("menu.beautiful.dashboard")}

{_("menu.beautiful.wallet")}
üí∞ <b>{user.balance:,}</b> {_("menu.beautiful.credits_label")}
{status}

{_("menu.beautiful.video_stats")}
üé¨ <b>{stats.get('total_generations', 0)}</b> {_("menu.beautiful.videos_label")}
üìÖ {_("menu.beautiful.last_video", time=time_str)}

{_("menu.beautiful.divider")}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
    if is_new_user:
        text += f"\n{_('menu.beautiful.special_offer')}\n\n"
    
    text += f"{_('menu.beautiful.quick_actions')}\n{_('menu.beautiful.lets_create')}"
    
    keyboard = get_main_menu(user.language_code or 'ru', user.balance)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
    if isinstance(message_or_callback, CallbackQuery):
        # –≠—Ç–æ CallbackQuery - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    elif new_message:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_callback.bot.send_message(
            message_or_callback.chat.id,
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        # –≠—Ç–æ Message - –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.message(Command("menu"))
async def menu_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = await db.get_user(message.from_user.id)
    
    if user:
        await show_main_menu(message, user)
    else:
        await message.answer(_('errors.please_use_start', default="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"))

@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å"""
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer(_('errors.please_use_start', default="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"))
        return
    
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    help_text = f"""
‚ùì <b>{_('menu.help')}</b>

<b>{_('help.commands', default='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')}:</b>
/start - {_('help.start', default='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º')}
/menu - {_('menu.main')}
/generate - {_('menu.generate')}
/balance - {_('help.balance', default='–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å')}
/buy - {_('menu.buy_credits')}
/history - {_('menu.history')}
/settings - {_('menu.settings')}
/help - {_('menu.help')}
/support - {_('menu.support')}

<b>{_('help.how_to_create', default='–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ')}:</b>
1. {_('help.step1', default='–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é')}
2. {_('help.step2', default='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: –¢–µ–∫—Å—Ç‚Üí–í–∏–¥–µ–æ –∏–ª–∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Üí–í–∏–¥–µ–æ')}
3. {_('help.step3', default='–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (Lite –∏–ª–∏ Pro)')}
4. {_('help.step4', default='–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')}
5. {_('help.step5', default='–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤–∏–¥–µ–æ')}
6. {_('help.step6', default='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ')}

<b>{_('help.need_help', default='–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?')}</b>
{_('help.contact_support', default='–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')}: /support
"""
    
    # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    builder.button(text=_("menu.main_menu"), callback_data="back_to_menu")
    
    await message.answer(help_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "help_menu")
async def help_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer(_('errors.please_use_start', default="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"), show_alert=True)
        return
    
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    help_text = f"""
‚ùì <b>{_('menu.help')}</b>

<b>{_('help.commands', default='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')}:</b>
/start - {_('help.start', default='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º')}
/menu - {_('menu.main')}
/generate - {_('menu.generate')}
/balance - {_('help.balance', default='–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å')}
/buy - {_('menu.buy_credits')}
/history - {_('menu.history')}
/settings - {_('menu.settings')}
/help - {_('menu.help')}
/support - {_('menu.support')}

<b>{_('help.how_to_create', default='–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ')}:</b>
1. {_('help.step1', default='–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é')}
2. {_('help.step2', default='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: –¢–µ–∫—Å—Ç‚Üí–í–∏–¥–µ–æ –∏–ª–∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Üí–í–∏–¥–µ–æ')}
3. {_('help.step3', default='–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (Lite –∏–ª–∏ Pro)')}
4. {_('help.step4', default='–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')}
5. {_('help.step5', default='–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤–∏–¥–µ–æ')}
6. {_('help.step6', default='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ')}

<b>{_('help.need_help', default='–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?')}</b>
{_('help.contact_support', default='–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')}: /support
"""
    
    # –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    builder.button(text=_("menu.main_menu"), callback_data="back_to_menu")
    
    await callback.message.edit_text(help_text, reply_markup=builder.as_markup())
    await callback.answer()

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    
    user = await db.get_user(message.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru' if user else 'ru', **kwargs)
    
    if current_state is None:
        await message.answer(_("cancel.nothing", default="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å ü§∑‚Äç‚ôÇÔ∏è"))
        return
    
    await state.clear()
    await message.answer(
        _("cancel.cancelled", default="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"),
        reply_markup=get_main_menu(user.language_code or 'ru' if user else 'ru', user.balance if user else 0)
    )

@router.callback_query(F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer(_('errors.use_start'), show_alert=True)
        return
    
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await show_main_menu(callback.message, user, new_message=True)
    await callback.answer(_("cancel.cancelled", default="‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"))

@router.message(Command("lang"))
async def language_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /lang - –±—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer("Please use /start first")
        return
    
    await message.answer(
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:</b>",
        reply_markup=get_language_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.callback_query(F.data == "choose_language")
async def show_language_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞"""
    await callback.message.edit_text(
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:</b>",
        reply_markup=get_language_keyboard()
    )
    await callback.answer()