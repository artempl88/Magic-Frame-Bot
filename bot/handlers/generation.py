import logging
import asyncio
from io import BytesIO
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboard.inline import (
    get_generation_mode_keyboard, get_model_selection_keyboard,
    get_resolution_keyboard, get_duration_keyboard,
    get_aspect_ratio_keyboard, get_generation_confirm_keyboard,
    get_generation_rating_keyboard, get_cancel_keyboard
)
from bot.utils.messages import MessageTemplates
from services.database import db
from services.wavespeed_api import get_wavespeed_api, GenerationRequest, calculate_generation_cost
from services.api_monitor import api_monitor
from core.constants import GENERATION_COSTS, GenerationStatus, ModelType, MODEL_INFO
from bot.middlewares.throttling import rate_limit, GenerationThrottling
from bot.middlewares.i18n import i18n

logger = logging.getLogger(__name__)

class GenerationStates(StatesGroup):
    choosing_mode = State()
    choosing_model = State()
    choosing_resolution = State()
    choosing_duration = State()
    choosing_aspect_ratio = State()
    choosing_audio = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ (Google Veo3)
    entering_prompt = State()
    uploading_image = State()
    confirming = State()
    processing = State()

router = Router(name="generation")

@router.message(F.text == "/generate")
@router.callback_query(F.data == "generate")
async def start_generation(update: Message | CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        error_msg = _('errors.please_use_start')
        if isinstance(update, CallbackQuery):
            await update.answer(error_msg, show_alert=True)
        else:
            await update.answer(error_msg)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if user.is_banned:
        ban_msg = _('errors.user_banned_msg', default="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support")
        if isinstance(update, CallbackQuery):
            await update.answer(ban_msg, show_alert=True)
        else:
            await update.answer(ban_msg)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.balance < 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        text = f"‚ùå <b>{_('errors.insufficient_balance')}</b>\n\n"
        text += f"üí∞ {_('menu.balance', balance=user.balance)}\n"
        text += f"üíé {_('generation.min_cost', default='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')}: 3 {_('common.credits')}\n\n"
        text += _('generation.need_more_credits', default='–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.')
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text=_("menu.buy_credits"), callback_data="shop"),
            InlineKeyboardButton(text=_("common.back"), callback_data="back_to_menu")
        ]])
        
        if isinstance(update, CallbackQuery):
            await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await update.answer()
        else:
            await update.answer(text, reply_markup=keyboard, parse_mode="HTML")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.mode_selection")}
{_("generation.beautiful.mode_description")}

{_("generation.beautiful.t2v_title")}
{_("generation.beautiful.t2v_desc")}
{_("generation.beautiful.t2v_features")}

{_("generation.beautiful.i2v_title")}
{_("generation.beautiful.i2v_desc")}
{_("generation.beautiful.i2v_features")}

{_("generation.beautiful.divider")}
"""
    
    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text, reply_markup=get_generation_mode_keyboard(user.language_code), parse_mode="HTML")
        await update.answer()
    else:
        await update.answer(text, reply_markup=get_generation_mode_keyboard(user.language_code), parse_mode="HTML")
    
    await state.set_state(GenerationStates.choosing_mode)

@router.callback_query(GenerationStates.choosing_mode, F.data.in_(["mode_t2v", "mode_i2v"]))
async def choose_mode(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    mode = callback.data.split("_")[1]
    await state.update_data(mode=mode)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    mode_text = _('generation.text_to_video') if mode == "t2v" else _('generation.image_to_video')
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.model_selection")}
{_("generation.beautiful.model_subtitle")}

üìå <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:</b> {mode_text}

{_("generation.beautiful.lite_title")}
{_("generation.beautiful.lite_desc")}
{_("generation.beautiful.lite_features")}

{_("generation.beautiful.pro_title")}
{_("generation.beautiful.pro_desc")}
{_("generation.beautiful.pro_features")}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_model_selection_keyboard(mode, user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_model)
    await callback.answer()

@router.callback_query(GenerationStates.choosing_model, F.data.startswith("model_"))
async def choose_model(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    parts = callback.data.split("_")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Veo3 –º–æ–¥–µ–ª–µ–π
    if len(parts) >= 4 and parts[1] == "veo3":
        if parts[2] == "fast":
            model_type = "veo3_fast"
            mode = parts[3]
        else:
            model_type = "veo3"
            mode = parts[2]
    else:
        model_type = parts[1]  # lite –∏–ª–∏ pro
        mode = parts[2]  # t2v –∏–ª–∏ i2v
    
    await state.update_data(model_type=model_type)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    mode_text = _('generation.text_to_video') if mode == "t2v" else _('generation.image_to_video')
    
    # Google Veo3 –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if model_type in ["veo3", "veo3_fast"]:
        model_info = MODEL_INFO[model_type]
        model_text = model_info["name"]
        
        # –î–ª—è Google Veo3 –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞—É–¥–∏–æ
        text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")} - {model_text}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: {model_text}
‚îú üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1080p (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
‚îú ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 8 —Å–µ–∫—É–Ω–¥ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
‚îî üì± –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 16:9 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

üéµ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ:</b>
–í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –≤–∏–¥–µ–æ?
‚Ä¢ –î–∏–∞–ª–æ–≥–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≥—É–±
‚Ä¢ –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏ –∏ –º—É–∑—ã–∫–∞
‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

üí° <b>–°–æ–≤–µ—Ç:</b> –ê—É–¥–∏–æ –¥–µ–ª–∞–µ—Ç –≤–∏–¥–µ–æ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

{_("generation.beautiful.divider")}
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(text="üéµ –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ", callback_data="audio_on")
        builder.button(text="üîá –ë–µ–∑ –∞—É–¥–∏–æ", callback_data="audio_off")
        builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="back_to_model")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await state.set_state(GenerationStates.choosing_audio)
        await callback.answer()
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (Seedance)
    model_text = "Pro" if model_type == "pro" else "Lite"
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.settings_title")}
{_("generation.beautiful.quality_resolution")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îî ü§ñ –ú–æ–¥–µ–ª—å: Seedance V1 {model_text}

{_("generation.beautiful.resolution_desc")}

üí° <b>–°–æ–≤–µ—Ç:</b> {_('generation.beautiful.resolution_tip')}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_resolution_keyboard(model_type, user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_resolution)
    await callback.answer()

@router.callback_query(GenerationStates.choosing_audio, F.data.in_(["audio_on", "audio_off"]))
async def choose_audio(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—É–¥–∏–æ –¥–ª—è Google Veo3"""
    generate_audio = callback.data == "audio_on"
    await state.update_data(generate_audio=generate_audio)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    model_type = data['model_type']
    mode = data['mode']
    
    mode_text = _('generation.text_to_video') if mode == "t2v" else _('generation.image_to_video')
    model_info = MODEL_INFO[model_type]
    
    audio_text = "üéµ –í–∫–ª—é—á–µ–Ω–æ" if generate_audio else "üîá –û—Ç–∫–ª—é—á–µ–Ω–æ"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º–ø—Ç–∞
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")} - {model_info["name"]}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

üìå <b>–ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: {model_info["name"]}
‚îú üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1080p
‚îú ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 8 —Å–µ–∫—É–Ω–¥
‚îú üì± –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 16:9
‚îî üéµ –ê—É–¥–∏–æ: {audio_text}

üìù <b>–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤–∏–¥–µ–æ:</b>
–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∫–∞–¥—Ä–µ.

üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∫–∞–¥—Ä–∞ (–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω, –æ–±—â–∏–π –ø–ª–∞–Ω)
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π)
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ, –ø–∞–Ω–æ—Ä–∞–º–∞)

{_("generation.beautiful.divider")}
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="back_to_audio")
    builder.button(text=f"‚ùå {_('common.cancel')}", callback_data="cancel_generation")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(GenerationStates.entering_prompt)
    await callback.answer()

@router.callback_query(GenerationStates.choosing_resolution, F.data.startswith("res_"))
async def choose_resolution(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
    resolution = callback.data.split("_")[1]
    await state.update_data(resolution=resolution)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    mode_text = _('generation.text_to_video') if data['mode'] == "t2v" else _('generation.image_to_video')
    model_text = "Pro" if data['model_type'] == "pro" else "Lite"
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.settings_title")}
{_("generation.beautiful.duration_time")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: Seedance V1 {model_text}
‚îî üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution}

{_("generation.beautiful.duration_desc")}

üí° <b>–°–æ–≤–µ—Ç:</b> {_('generation.beautiful.duration_tip')}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_duration_keyboard(user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_duration)
    await callback.answer()

@router.callback_query(GenerationStates.choosing_duration, F.data.startswith("dur_"))
async def choose_duration(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    duration = int(callback.data.split("_")[1])  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
    await state.update_data(duration=duration)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    mode_text = _('generation.text_to_video') if data['mode'] == "t2v" else _('generation.image_to_video')
    model_text = "Pro" if data['model_type'] == "pro" else "Lite"
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.settings_title")}
{_("generation.beautiful.aspect_ratio")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: Seedance V1 {model_text}
‚îú üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {data['resolution']}
‚îî ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}—Å

{_("generation.beautiful.aspect_desc")}

üí° <b>–°–æ–≤–µ—Ç:</b> {_('generation.beautiful.aspect_tip')}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_aspect_ratio_keyboard(user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_aspect_ratio)
    await callback.answer()

@router.callback_query(GenerationStates.choosing_aspect_ratio, F.data.startswith("ratio_"))
async def choose_aspect_ratio(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    ratio = callback.data.split("_", 1)[1].replace("_", ":")
    await state.update_data(aspect_ratio=ratio)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    mode_text = _('generation.text_to_video') if data['mode'] == "t2v" else _('generation.image_to_video')
    model_text = "Pro" if data['model_type'] == "pro" else "Lite"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if data['mode'] == "t2v":
        # –î–ª—è text-to-video –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ–º—Ç–∞
        text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.prompt_title")}
{_("generation.beautiful.prompt_subtitle")}

üìå <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: Seedance V1 {model_text}
‚îú üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {data['resolution']}
‚îú ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']}—Å
‚îî üìè –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {ratio}

{_("generation.beautiful.prompt_desc")}

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º—Ç–æ–≤:</b>
‚Ä¢ {_('generation.example_1', default='"–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º —Å –≤–æ–ª–Ω–∞–º–∏"')}
‚Ä¢ {_('generation.example_2', default='"–ö–æ—Ç–µ–Ω–æ–∫ –∏–≥—Ä–∞–µ—Ç –≤ —Å–∞–¥—É —Å—Ä–µ–¥–∏ —Ü–≤–µ—Ç–æ–≤"')}
‚Ä¢ {_('generation.example_3', default='"–ì–æ—Ä–æ–¥—Å–∫–∞—è —É–ª–∏—Ü–∞ –≤ –¥–æ–∂–¥—å —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ –æ–≥–Ω—è–º–∏"')}

{_("generation.beautiful.divider")}
"""
        
        await callback.message.edit_text(text, reply_markup=get_cancel_keyboard(user.language_code), parse_mode="HTML")
        await state.set_state(GenerationStates.entering_prompt)
        await callback.answer()
    else:
        # –î–ª—è image-to-video –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await request_image_upload(callback, state)

async def request_image_upload(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è I2V"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    mode_text = _('generation.text_to_video') if data['mode'] == "t2v" else _('generation.image_to_video')
    model_text = "Pro" if data['model_type'] == "pro" else "Lite"
    
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.image_upload")}
{_("generation.beautiful.image_subtitle")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: Seedance V1 {model_text}
‚îú üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {data['resolution'].upper()}
‚îî ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} —Å–µ–∫

üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:</b>
{_('generation.image_requirements.format')}
{_('generation.image_requirements.size', max_size=10)}
{_('generation.image_requirements.resolution', min_res=300)}

{_("generation.beautiful.image_quality")}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_cancel_keyboard(user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.uploading_image)

@router.message(GenerationStates.entering_prompt, F.text)
async def process_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞"""
    prompt = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(message.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(prompt) > 2000:
        await message.answer(
            f"‚ùå {_('errors.prompt_too_long')} ({len(prompt)} {_('generation.characters', default='—Å–∏–º–≤–æ–ª–æ–≤')})\n"
            f"{_('generation.max_chars', max=2000)}\n\n"
            f"{_('generation.please_shorten', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.')}",
            reply_markup=get_cancel_keyboard(user.language_code)
        )
        return
    
    if len(prompt) < 10:
        await message.answer(
            f"‚ùå {_('errors.prompt_too_short')}\n"
            f"{_('generation.please_elaborate', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å.')}",
            reply_markup=get_cancel_keyboard(user.language_code)
        )
        return
    
    await state.update_data(prompt=prompt)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await show_generation_confirmation(message, state)

@router.message(GenerationStates.uploading_image, F.photo)
async def process_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(message.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    photo = message.photo[-1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (10 MB)
    if photo.file_size > 10 * 1024 * 1024:
        await message.answer(
            f"‚ùå {_('errors.image_too_large')}\n"
            f"{_('generation.max_size', default='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä')}: 10 {_('generation.mb', default='–ú–ë')}",
            reply_markup=get_cancel_keyboard(user.language_code)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º file_id
    if not photo.file_id or not photo.file_id.startswith(('AgAC', 'AQAD')):
        logger.warning(f"Invalid file_id format: {photo.file_id}")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(photo.file_id)
        file_data = BytesIO()
        await message.bot.download_file(file.file_path, file_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_data.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü
        file_size = file_data.tell()
        file_data.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
        
        if file_size == 0:
            raise ValueError("Downloaded file is empty")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        api = get_wavespeed_api()
        image_base64 = await api.convert_image_to_base64(file_data.getvalue())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            image_base64=image_base64,
            image_file_id=photo.file_id
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
        text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.animation_prompt")}
{_("generation.beautiful.animation_subtitle")}

‚úÖ <b>{_('generation.image_uploaded')}!</b>

{_("generation.beautiful.prompt_creativity")}

{_("generation.beautiful.prompt_examples")}
{_("generation.beautiful.example_1")}
{_("generation.beautiful.example_2")}
{_("generation.beautiful.example_3")}

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏:</b>
{_('generation.animation_examples.camera')}
{_('generation.animation_examples.character')}
{_('generation.animation_examples.nature')}

üìå <i>{_('generation.max_chars', max=2000)}</i>

{_("generation.beautiful.divider")}
"""
        
        await message.answer(text, reply_markup=get_cancel_keyboard(user.language_code), parse_mode="HTML")
        await state.set_state(GenerationStates.entering_prompt)
        
    except Exception as e:
        logger.error(f"Error processing image: {e}")
        await message.answer(
            f"‚ùå {_('generation.image_error', default='–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')}\n"
            f"{_('generation.try_another_image', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')}",
            reply_markup=get_cancel_keyboard(user.language_code)
        )
        # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑

@router.message(GenerationStates.uploading_image)
async def handle_non_photo_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    user = await db.get_user(message.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    await message.answer(
        f"‚ùå {_('errors.invalid_file_type', default='–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')}\n"
        f"{_('generation.photo_only', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç).')}",
        reply_markup=get_cancel_keyboard(user.language_code)
    )

async def show_generation_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(message.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if data['model_type'] in ["veo3", "veo3_fast"]:
        # Google Veo3 models
        model_name = "veo3" if data['model_type'] == "veo3" else "veo3-fast"
        duration = 8  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è Veo3
    else:
        # Seedance models
        model_name = f"seedance-v1-{data['model_type']}-{data['mode']}-{data['resolution']}"
        duration = data['duration']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    cost = await calculate_generation_cost(model_name, duration)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = user.balance
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
    balance_status = ""
    if balance < cost:
        balance_status = f"\n‚ùå <b>{_('generation.insufficient_balance', missing=cost - balance)}</b>"
    else:
        balance_status = f"\n‚úÖ {_('generation.balance_after', balance=balance - cost)}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    mode_text = _('generation.text_to_video') if data['mode'] == 't2v' else _('generation.image_to_video')
    
    if data['model_type'] in ["veo3", "veo3_fast"]:
        # Google Veo3 models
        model_info = MODEL_INFO[data['model_type']]
        model_text = model_info["name"]
        resolution_text = "1080p (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)"
        duration_text = "8 —Å–µ–∫—É–Ω–¥ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)"
        aspect_ratio = "16:9 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)"
        audio_text = "üéµ –í–∫–ª—é—á–µ–Ω–æ" if data.get('generate_audio', False) else "üîá –û—Ç–∫–ª—é—á–µ–Ω–æ"
    else:
        # Seedance models
        model_text = "Pro" if data['model_type'] == 'pro' else "Lite"
        resolution_text = data['resolution'].upper()
        duration_text = f"{data['duration']} —Å–µ–∫"
        aspect_ratio = data.get('aspect_ratio', '16:9')
        audio_text = None
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.confirmation")}
{_("generation.beautiful.generation_summary")}

üìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: {model_text}
‚îú üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution_text}
‚îú ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}"""
    
    if data['model_type'] not in ["veo3", "veo3_fast"] and data['mode'] == 't2v':
        text += f"\n‚îú üñºÔ∏è –§–æ—Ä–º–∞—Ç: {aspect_ratio}"
    elif data['model_type'] in ["veo3", "veo3_fast"]:
        text += f"\n‚îú üñºÔ∏è –§–æ—Ä–º–∞—Ç: {aspect_ratio}"
        text += f"\n‚îú üéµ –ê—É–¥–∏–æ: {audio_text}"
    
    text += f"\n‚îî üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –∫—Ä–µ–¥–∏—Ç–æ–≤"
    
    text += f"""

üìù <b>–í–∞—à –ø—Ä–æ–º–ø—Ç:</b>
<i>"{data['prompt'][:300]}{'...' if len(data['prompt']) > 300 else ''}"</i>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} –∫—Ä–µ–¥–∏—Ç–æ–≤{balance_status}

{_("generation.beautiful.all_set")}

{_("generation.beautiful.divider")}
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    await state.update_data(cost=cost, model=model_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = get_generation_confirm_keyboard(cost, user.language_code) if balance >= cost else get_cancel_keyboard(user.language_code)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(GenerationStates.confirming)

@router.callback_query(GenerationStates.confirming, F.data == "confirm_generation")
async def confirm_generation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(user_id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å API –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    api_balance_check = await api_monitor.check_and_notify(callback.bot)
    
    if not api_monitor.is_service_available(api_balance_check.get('balance')):
        # –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –Ω—É–ª–µ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ API
        maintenance_message = api_monitor.get_maintenance_message()
        await callback.message.edit_text(
            maintenance_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text=_("common.back"), callback_data="back_to_menu")
            ]]),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    allowed, error_message = await GenerationThrottling.check_generation_limit(user_id)
    if not allowed:
        await callback.answer(f"‚è± {error_message}", show_alert=True)
        return
    
    # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.balance < data['cost']:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!", show_alert=True)
        return
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        await db.update_user_balance(user.id, -data['cost'])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation = await db.create_generation(
            user_id=user.id,
            mode=data['mode'],
            model=data['model'],
            prompt=data['prompt'],
            cost=data['cost'],
            resolution=data['resolution'],
            duration=data['duration'],
            aspect_ratio=data.get('aspect_ratio', '16:9'),
            image_url=data.get('image_file_id')
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.processing_title")}
{_("generation.beautiful.ai_working")}
{_("generation.beautiful.divider")}

üÜî <b>ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> <code>{generation.id}</code>
üí∞ <b>–°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {data['cost']}

{_("generation.beautiful.progress_processing")}
{_("generation.beautiful.progress_bar")}

{_("generation.beautiful.please_wait")}
{_("generation.beautiful.eta")}

{_("generation.beautiful.divider")}
"""
        
        await callback.message.edit_text(text, parse_mode="HTML")
        
        await state.set_state(GenerationStates.processing)
        await callback.answer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        asyncio.create_task(process_generation(
            callback.message,
            generation,
            data,
            state
        ))
        
    except Exception as e:
        logger.error(f"Error confirming generation: {e}")
        
        # –û—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        GenerationThrottling.cancel_generation_limit(user_id)
        
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        await state.set_state(GenerationStates.confirming)

async def process_generation(message: Message, generation, data: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–µ
        user = await db.get_user_by_id(generation.user_id)
        _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
        
        api = get_wavespeed_api()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if data['model'] in ["veo3", "veo3-fast"]:
            # Google Veo3 request
            request = GenerationRequest(
                model=data['model'],
                prompt=data['prompt'],
                duration=8,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                aspect_ratio=data.get('aspect_ratio', '16:9'),
                generate_audio=data.get('generate_audio', False),
                enable_prompt_expansion=True
            )
        else:
            # Seedance request
            request = GenerationRequest(
                model=data['model'],
                prompt=data['prompt'],
                duration=data['duration'],
                aspect_ratio=data.get('aspect_ratio', '16:9'),
                image=f"data:image/jpeg;base64,{data['image_base64']}" if data.get('image_base64') else None
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_generation_status(generation.id, GenerationStatus.PROCESSING)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        initial_text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.processing_title")}
{_("generation.beautiful.ai_working")}
{_("generation.beautiful.divider")}

üÜî <b>ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> <code>{generation.id}</code>
üí∞ <b>–°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {data['cost']}

‚è≥ <b>{_("generation.beautiful.progress_processing")}</b>
‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 0%

‚è± <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:</b> 0 —Å–µ–∫

{_("generation.beautiful.divider")}
"""
        await message.edit_text(initial_text, parse_mode="HTML")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        await asyncio.sleep(1)
        
        # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        last_progress = -1  # –ù–∞—á–∏–Ω–∞–µ–º —Å -1 —á—Ç–æ–±—ã –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –ø—Ä–æ—à–ª–æ
        last_update_time = asyncio.get_event_loop().time()
        
        async def progress_callback(progress: int, status: str):
            nonlocal last_progress, last_update_time
            current_time = asyncio.get_event_loop().time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            should_update = (
                progress > last_progress or 
                progress == 100 or
                current_time - last_update_time >= 3 or  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                (progress == 0 and last_progress == -1)  # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            )
            
            if should_update:
                last_progress = progress
                last_update_time = current_time
                
                logger.debug(f"Updating progress UI: {progress}% (status: {status})")
                
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_blocks = int(progress / 10)
                    progress_bar = "‚ñà" * progress_blocks + "‚ñë" * (10 - progress_blocks)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ API
                    if progress == 0:
                        status_emoji = "‚è≥"
                        status_text = _("generation.beautiful.progress_processing")
                    elif progress < 20:
                        status_emoji = "üîÑ"
                        status_text = _("generation.beautiful.progress_processing")
                    elif progress < 50:
                        status_emoji = "üîç"
                        status_text = _("generation.beautiful.progress_analyzing")
                    elif progress < 80:
                        status_emoji = "üé®"
                        status_text = _("generation.beautiful.progress_rendering")
                    elif progress < 100:
                        status_emoji = "‚ú®"
                        status_text = _("generation.beautiful.progress_finalizing")
                    else:
                        status_emoji = "‚úÖ"
                        status_text = _("generation.beautiful.progress_complete")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.processing_title")}
{_("generation.beautiful.ai_working")}
{_("generation.beautiful.divider")}

üÜî <b>ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> <code>{generation.id}</code>
üí∞ <b>–°–ø–∏—Å–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:</b> {data['cost']}

{status_emoji} <b>{status_text}</b>
{progress_bar} {progress}%

‚è± <b>–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:</b> {MessageTemplates.format_time(int((progress / 100) * 60))}

{_("generation.beautiful.divider")}
"""
                    
                    await message.edit_text(text, parse_mode="HTML")
                except Exception as e:
                    logger.debug(f"Progress update skipped: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        result = await api.generate_video(request, progress_callback)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        await db.update_generation_status(
            generation.id,
            GenerationStatus.COMPLETED,
            video_url=result.video_url,
            generation_time=result.generation_time
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_data = await api.download_video(result.video_url)
        
        # –ï—Å–ª–∏ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        if generation.used_bonus_credits:
            try:
                from services.video_processor import add_qr_code_to_video
                logger.info(f"Adding QR code to video {generation.id} (created with bonus credits)")
                video_data = await add_qr_code_to_video(video_data)
            except Exception as e:
                logger.error(f"Error adding QR code to video {generation.id}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ QR-–∫–æ–¥–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        video_file = BufferedInputFile(
            video_data,
            filename=f"seedance_{generation.id}.mp4"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (—É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏)
        
        bonus_info = ""
        if generation.used_bonus_credits:
            bonus_info = f"\n{_('generation.bonus_credits_info')}\n"
        
        caption = (
            f"{_('generation.beautiful.success_title')}\n"
            f"{_('generation.beautiful.success_subtitle')}\n\n"
            f"{_('generation.beautiful.download_ready')}\n{bonus_info}\n"
            f"{_('generation.beautiful.generation_stats')}\n"
            f"üÜî <b>ID:</b> <code>{generation.id}</code>\n"
            f"{_('generation.beautiful.time_spent', time=int(result.generation_time))}\n"
            f"{_('generation.beautiful.model_used', model=data['model'])}\n"
            f"üìê <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</b> {data['resolution'].upper()}\n"
            f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {data['duration']} —Å–µ–∫\n\n"
            f"{_('generation.beautiful.rate_prompt')}:"
        )
        
        sent_message = await message.answer_video(
            video_file,
            caption=caption,
            reply_markup=get_generation_rating_keyboard(generation.id)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤–∏–¥–µ–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±—É–¥—É—â–µ–º
        if sent_message.video:
            await db.update_generation_video_file_id(generation.id, sent_message.video.file_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å API –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            await api_monitor.check_and_notify(message.bot)
        except Exception as e:
            logger.error(f"Error checking API balance after generation: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            await message.delete()
        except:
            pass
        
    except asyncio.CancelledError:
        logger.info(f"Generation {generation.id} was cancelled")
        
        # –û—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —á–µ—Ä–µ–∑ asyncio
        user = await db.get_user_by_id(generation.user_id)
        if user:
            GenerationThrottling.cancel_generation_limit(user.telegram_id)
        
        raise
    except Exception as e:
        logger.error(f"Generation {generation.id} failed: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_generation_status(
            generation.id,
            GenerationStatus.FAILED,
            error_message=str(e)
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        await db.update_user_balance(generation.user_id, generation.cost)
        
        # –û—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        user = await db.get_user_by_id(generation.user_id)
        if user:
            GenerationThrottling.cancel_generation_limit(user.telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        error_message = str(e)
        
        # –û—à–∏–±–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if any(word in error_message.lower() for word in ['flagged', 'sensitive', 'content', 'moderation', 'inappropriate']):
            error_text = (
                f"üö´ <b>–û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò</b>\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n"
                f"üí∞ <b>–ö—Ä–µ–¥–∏—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å</b>\n\n"
                f"üñºÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> Generation failed: Content flagged as potentially sensitive. Please try different prompts or images\n\n"
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                f"‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç) –Ω–∞ –±–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏)\n"
                f"‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–∏–Ω—è—Ç—ã –∫–∞–∫ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω—É –±–æ–ª–µ–µ –æ–±—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        elif "download" in error_message.lower() or "cloudfront" in error_message.lower():
            # –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
            error_text = (
                f"{_('generation.beautiful.error_title')}\n"
                f"{_('generation.beautiful.error_subtitle')}\n\n"
                f"{_('generation.beautiful.credits_refunded')}\n\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ\n\n"
                f"üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –µ—â–µ —Ä–∞–∑\n"
                f"‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                f"‚Ä¢ –í–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∂–µ\n\n"
                f"{_('generation.try_again_or_support', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')}"
            )
        elif "timeout" in error_message.lower():
            # –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
            error_text = (
                f"{_('generation.beautiful.error_title')}\n"
                f"{_('generation.beautiful.error_subtitle')}\n\n"
                f"{_('generation.beautiful.credits_refunded')}\n\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è\n\n"
                f"üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –µ—â–µ —Ä–∞–∑\n"
                f"‚Ä¢ –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω\n"
                f"‚Ä¢ –í–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∂–µ\n\n"
                f"{_('generation.try_again_or_support', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')}"
            )
        elif "network" in error_message.lower() or "connection" in error_message.lower():
            # –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            error_text = (
                f"{_('generation.beautiful.error_title')}\n"
                f"{_('generation.beautiful.error_subtitle')}\n\n"
                f"{_('generation.beautiful.credits_refunded')}\n\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º\n\n"
                f"üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –µ—â–µ —Ä–∞–∑\n"
                f"‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                f"{_('generation.try_again_or_support', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')}"
            )
        else:
            # –û–±—â–∞—è –æ—à–∏–±–∫–∞
            error_text = (
                f"{_('generation.beautiful.error_title')}\n"
                f"{_('generation.beautiful.error_subtitle')}\n\n"
                f"{_('generation.beautiful.credits_refunded')}\n\n"
                f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}\n\n"
                f"{_('generation.try_again_or_support', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')}"
            )
        
        builder = InlineKeyboardBuilder()
        builder.button(text=f"{_('generation.beautiful.error_retry')}", callback_data="generate")
        builder.button(text=f"{_('generation.beautiful.error_support')}", callback_data="support")
        builder.adjust(2)
        
        try:
            await message.edit_text(error_text, reply_markup=builder.as_markup())
        except:
            await message.answer(error_text, reply_markup=builder.as_markup())
    
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

# =================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ===================

@router.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    current_state = await state.get_state()
    
    if current_state == GenerationStates.choosing_model:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
        await start_generation(callback, state)
    elif current_state == GenerationStates.choosing_audio:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
        await back_to_model(callback, state)
    elif current_state == GenerationStates.choosing_resolution:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
        await back_to_model(callback, state)
    elif current_state == GenerationStates.choosing_duration:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        await back_to_resolution(callback, state)
    elif current_state == GenerationStates.choosing_aspect_ratio:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await back_to_duration(callback, state)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await handle_back_to_menu(callback, state)

@router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    from bot.handlers.start import show_main_menu
    await show_main_menu(callback.message, user)
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–µ–π –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    if current_state in [
        GenerationStates.entering_prompt,
        GenerationStates.uploading_image
    ]:
        await cancel_generation(callback, state)
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await handle_back_to_menu(callback, state)

@router.callback_query(F.data == "cancel_generation")
async def cancel_generation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å
    if current_state == GenerationStates.processing:
        user = await db.get_user(callback.from_user.id)
        _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
        await callback.answer(_('generation.cannot_cancel_processing', default="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"), show_alert=True)
        return
    
    # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–æ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
    if current_state == GenerationStates.confirming:
        GenerationThrottling.cancel_generation_limit(callback.from_user.id)
    
    await state.clear()
    
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.cancelled_title")}
{_("generation.beautiful.cancelled_subtitle")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.credits_refunded")}

{_("generation.beautiful.back_to_menu")}

{_("generation.beautiful.divider")}
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.handlers.start import show_main_menu
    await show_main_menu(callback.message, user)
    
    await callback.answer(_('generation.cancelled', default='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —à–∞–≥–∞–º
@router.callback_query(GenerationStates.choosing_resolution, F.data == "back_to_model")
async def back_to_model(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏"""
    data = await state.get_data()
    mode = data.get('mode', 't2v')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    mode_text = _('generation.text_to_video') if mode == "t2v" else _('generation.image_to_video')
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.model_selection")}
{_("generation.beautiful.model_subtitle")}

üìå <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:</b> {mode_text}

{_("generation.beautiful.lite_title")}
{_("generation.beautiful.lite_desc")}
{_("generation.beautiful.lite_features")}

{_("generation.beautiful.pro_title")}
{_("generation.beautiful.pro_desc")}
{_("generation.beautiful.pro_features")}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_model_selection_keyboard(mode, user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_model)
    await callback.answer()

@router.callback_query(GenerationStates.choosing_duration, F.data == "back_to_resolution")
async def back_to_resolution(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
    data = await state.get_data()
    model_type = data.get('model_type', 'lite')
    mode = data.get('mode', 't2v')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    mode_text = _('generation.text_to_video') if mode == "t2v" else _('generation.image_to_video')
    model_text = "Pro" if model_type == "pro" else "Lite"
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.settings_title")}
{_("generation.beautiful.quality_resolution")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îî ü§ñ –ú–æ–¥–µ–ª—å: Seedance V1 {model_text}

{_("generation.beautiful.resolution_desc")}

üí° <b>–°–æ–≤–µ—Ç:</b> {_('generation.beautiful.resolution_tip')}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_resolution_keyboard(model_type, user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_resolution)
    await callback.answer()

@router.callback_query(GenerationStates.entering_prompt, F.data == "back_to_audio")
async def back_to_audio(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏–æ –¥–ª—è Google Veo3"""
    data = await state.get_data()
    model_type = data.get('model_type')
    mode = data.get('mode', 't2v')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    mode_text = _('generation.text_to_video') if mode == "t2v" else _('generation.image_to_video')
    model_info = MODEL_INFO[model_type]
    model_text = model_info["name"]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏–æ
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")} - {model_text}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: {model_text}
‚îú üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1080p (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
‚îú ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 8 —Å–µ–∫—É–Ω–¥ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ)
‚îî üì± –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 16:9 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

üéµ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ:</b>
–í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –≤–∏–¥–µ–æ?
‚Ä¢ –î–∏–∞–ª–æ–≥–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≥—É–±
‚Ä¢ –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏ –∏ –º—É–∑—ã–∫–∞
‚Ä¢ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

üí° <b>–°–æ–≤–µ—Ç:</b> –ê—É–¥–∏–æ –¥–µ–ª–∞–µ—Ç –≤–∏–¥–µ–æ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

{_("generation.beautiful.divider")}
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    builder.button(text="üéµ –í–∫–ª—é—á–∏—Ç—å –∞—É–¥–∏–æ", callback_data="audio_on")
    builder.button(text="üîá –ë–µ–∑ –∞—É–¥–∏–æ", callback_data="audio_off")
    builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="back_to_model")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_audio)
    await callback.answer()

@router.callback_query(GenerationStates.choosing_aspect_ratio, F.data == "back_to_duration")
async def back_to_duration(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    data = await state.get_data()
    mode = data.get('mode', 't2v')
    model_type = data.get('model_type', 'lite')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    mode_text = _('generation.text_to_video') if mode == "t2v" else _('generation.image_to_video')
    model_text = "Pro" if model_type == "pro" else "Lite"
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    text = f"""
{_("generation.beautiful.divider")}
{_("generation.beautiful.create_title")}
{_("generation.beautiful.ai_magic")}
{_("generation.beautiful.divider")}

{_("generation.beautiful.settings_title")}
{_("generation.beautiful.duration_time")}

üìå <b>–í—ã–±—Ä–∞–Ω–æ:</b>
‚îú üéØ –†–µ–∂–∏–º: {mode_text}
‚îú ü§ñ –ú–æ–¥–µ–ª—å: Seedance V1 {model_text}
‚îî üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {data['resolution']}

{_("generation.beautiful.duration_desc")}

üí° <b>–°–æ–≤–µ—Ç:</b> {_('generation.beautiful.duration_tip')}

{_("generation.beautiful.divider")}
"""
    
    await callback.message.edit_text(text, reply_markup=get_duration_keyboard(user.language_code), parse_mode="HTML")
    await state.set_state(GenerationStates.choosing_duration)
    await callback.answer()

# =================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===================

@router.callback_query(F.data.startswith("rate_"))
async def rate_generation(callback: CallbackQuery):
    """–û—Ü–µ–Ω–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        parts = callback.data.split("_")
        generation_id = int(parts[1])
        rating = int(parts[2])
        
        if rating < 1 or rating > 5:
            raise ValueError("Invalid rating")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        generation = await db.get_generation(generation_id)
        user = await db.get_user(callback.from_user.id)
        
        if not generation or not user or generation.user_id != user.id:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        await db.rate_generation(generation_id, rating)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
        
        await callback.answer(f"‚úÖ {_('generation.rating_saved', default='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')}")
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ü–µ–Ω–∫–∏
        await callback.message.edit_reply_markup(reply_markup=None)
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏", show_alert=True)

@router.callback_query(F.data == "skip_rating")
async def skip_rating(callback: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    await callback.answer(_('generation.rating_skipped', default='–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞'))
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ü–µ–Ω–∫–∏
    await callback.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data == "compare_models")
async def compare_models(callback: CallbackQuery):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    user = await db.get_user(callback.from_user.id)
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    text = f"ü§ñ <b>{_('models.comparison_title', default='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π')}</b>\n\n"
    
    # Google Veo3 Fast
    veo3_fast_info = MODEL_INFO["veo3_fast"]
    text += f"<b>‚ö° {veo3_fast_info['name']}</b>\n"
    for feature in veo3_fast_info['features']:
        text += f"‚Ä¢ {feature}\n"
    text += f"‚Ä¢ üéØ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
    text += f"‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 20 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ 8 —Å–µ–∫—É–Ω–¥\n\n"
    
    # Google Veo3
    veo3_info = MODEL_INFO["veo3"]
    text += f"<b>üöÄ {veo3_info['name']}</b>\n"
    for feature in veo3_info['features']:
        text += f"‚Ä¢ {feature}\n"
    text += f"‚Ä¢ üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç Google DeepMind\n"
    text += f"‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 100 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ 8 —Å–µ–∫—É–Ω–¥\n\n"
    
    # Lite –º–æ–¥–µ–ª—å
    lite_info = MODEL_INFO["lite"]
    text += f"<b>ü•à {lite_info['name']}</b>\n"
    for feature in lite_info['features']:
        text += f"‚Ä¢ {feature}\n"
    text += f"‚Ä¢ {_('models.lite.use_case', default='üéØ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ü–µ–Ω')}\n"
    text += f"‚Ä¢ {_('models.lite.perfect_for', default='üí° –ò–¥–µ–∞–ª—å–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤')}\n\n"
    
    # Pro –º–æ–¥–µ–ª—å  
    pro_info = MODEL_INFO["pro"]
    text += f"<b>ü•á {pro_info['name']}</b>\n"
    for feature in pro_info['features']:
        text += f"‚Ä¢ {feature}\n"
    text += f"‚Ä¢ {_('models.pro.use_case', default='üéØ –°–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω—ã –∏ –¥–≤–∏–∂–µ–Ω–∏—è')}\n"
    text += f"‚Ä¢ {_('models.pro.perfect_for', default='üé® –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')}\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += f"<b>{_('models.recommendations', default='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')}:</b>\n"
    text += f"‚Ä¢ üöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Veo3 Fast –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ\n"
    text += f"‚Ä¢ üé≠ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Veo3 –¥–ª—è –≤–∏–¥–µ–æ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –∞—É–¥–∏–æ\n"
    text += f"‚Ä¢ {_('models.rec1', default='–ù–∞—á–Ω–∏—Ç–µ —Å Lite –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–¥–µ–π')}\n"
    text += f"‚Ä¢ {_('models.rec2', default='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Pro –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ')}"
    
    await callback.answer(text, show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(F.document)
async def handle_document_in_generation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ"""
    current_state = await state.get_state()
    
    if current_state == GenerationStates.uploading_image:
        user = await db.get_user(message.from_user.id)
        _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
        
        await message.answer(
            f"‚ùå {_('generation.send_as_photo', default='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.')}\n\n"
            f"üí° {_('generation.photo_hint', default='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìé –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ¬ª')}",
            reply_markup=get_cancel_keyboard(user.language_code or 'ru')
        )