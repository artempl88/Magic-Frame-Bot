import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.middlewares.i18n import I18n, LanguageManager
from services.database import db
from core.config import settings

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
i18n = I18n()

class SettingsStates(StatesGroup):
    changing_language = State()

router = Router(name="settings")

@router.callback_query(F.data == "settings")
async def show_settings(update: CallbackQuery | Message, state: FSMContext = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear() if state else None
    
    if isinstance(update, CallbackQuery):
        if not await db.get_user(update.from_user.id):
            await update.answer(i18n.get('errors.use_start', lang='ru'), show_alert=True)
            return
    else:
        if not await db.get_user(update.from_user.id):
            await update.answer(i18n.get('errors.please_use_start', lang='ru'))
            return
    
    user = await db.get_user(update.from_user.id)
    user_lang = user.language_code or 'ru'
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def _(key, **kwargs):
        return i18n.get(key, lang=user_lang, **kwargs)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings_dict = user.settings or {}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"‚öôÔ∏è <b>{_('settings.title')}</b>\n\n"
    text += f"{_('settings.description')}\n\n"
    
    # –Ø–∑—ã–∫
    current_lang = user.language_code or 'ru'
    lang_names = {
        'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
        'en': 'üá¨üáß English'
    }
    text += f"üåê {_('settings.language')}: {lang_names.get(current_lang, current_lang)}\n"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications_on = settings_dict.get('notifications', True)
    notifications_status = _('settings.enabled') if notifications_on else _('settings.disabled')
    text += f"üîî {_('settings.notifications')}: {notifications_status}\n"
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏
    tips_on = settings_dict.get('show_tips', True)
    tips_status = _('settings.enabled') if tips_on else _('settings.disabled')
    text += f"üí° {_('settings.tips')}: {tips_status}\n"
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_quality = settings_dict.get('default_quality', '720p')
    text += f"üé¨ {_('settings.quality_preference')}: {default_quality}\n"
    
    # –ö–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üåê {_('settings.change_language')}", callback_data="change_language")
    builder.button(text=f"üîî {_('settings.toggle_notifications')}", callback_data="toggle_notifications")
    builder.button(text=f"üé¨ {_('settings.change_quality')}", callback_data="change_quality")
    builder.button(text=f"üí° {_('settings.toggle_tips')}", callback_data="toggle_tips")
    builder.button(text=f"üë§ {_('settings.account_info')}", callback_data="account_info")
    builder.button(text=f"üîí {_('settings.privacy_settings')}", callback_data="privacy_settings")
    builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="back_to_menu")
    builder.adjust(2, 2, 1, 1, 1)
    
    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text, reply_markup=builder.as_markup())
        await update.answer()
    else:
        await update.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "change_language")
async def change_language(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    user = await db.get_user(callback.from_user.id)
    user_lang = user.language_code or 'ru'
    
    def _(key, **kwargs):
        return i18n.get(key, lang=user_lang, **kwargs)
    
    keyboard = LanguageManager.get_language_keyboard()
    
    await callback.message.edit_text(
        f"üåê <b>{_('settings.change_language')}</b>\n\n"
        f"{_('welcome.choose_language')}",
        reply_markup=keyboard
    )
    
    await state.set_state(SettingsStates.changing_language)
    await callback.answer()

@router.callback_query(SettingsStates.changing_language, F.data.startswith("lang_"))
async def save_language(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫"""
    try:
        lang_code = callback.data.split("_")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —è–∑—ã–∫–∞
        available_languages = i18n.get_available_languages()
        if lang_code not in available_languages:
            await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –ë–î
        success = await LanguageManager.set_user_language(callback.from_user.id, lang_code)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
            new_lang_translate = lambda key, **kwargs: i18n.get(key, lang=lang_code, **kwargs)
            
            await callback.message.edit_text(
                f"‚úÖ {new_lang_translate('settings.language_changed')}\n\n"
                f"{new_lang_translate('menu.choose_action')}",
                reply_markup=InlineKeyboardBuilder()
                .button(text=new_lang_translate('common.back'), callback_data="settings")
                .as_markup()
            )
        else:
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞", show_alert=True)
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error changing language: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)
            return
        
        user_lang = user.language_code or 'ru'
        def _(key, **kwargs):
            return i18n.get(key, lang=user_lang, **kwargs)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_dict = user.settings or {}
        current_state = settings_dict.get('notifications', True)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        settings_dict['notifications'] = not current_state
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await db.update_user_settings(user.id, settings_dict)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_state = not current_state
        status = _('settings.enabled') if new_state else _('settings.disabled')
        message = _('settings.notifications_status', status=status)
        
        await callback.answer(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_settings(callback)
        
    except Exception as e:
        logger.error(f"Error toggling notifications: {e}")
        await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)

@router.callback_query(F.data == "change_quality")
async def change_quality(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    user = await db.get_user(callback.from_user.id)
    user_lang = user.language_code or 'ru'
    
    def _(key, **kwargs):
        return i18n.get(key, lang=user_lang, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    qualities = [
        ("480p", _('settings.quality_480p')),
        ("720p", _('settings.quality_720p')),
        ("1080p", _('settings.quality_1080p'))
    ]
    
    for quality, description in qualities:
        builder.button(text=description, callback_data=f"set_quality_{quality}")
    
    builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="settings")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üé¨ <b>{_('settings.change_quality')}</b>\n\n"
        f"{_('settings.quality_description')}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("set_quality_"))
async def save_quality(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        quality = callback.data.split("_")[2]
        
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)
            return
        
        user_lang = user.language_code or 'ru'
        def _(key, **kwargs):
            return i18n.get(key, lang=user_lang, **kwargs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_dict = user.settings or {}
        settings_dict['default_quality'] = quality
        
        await db.update_user_settings(user.id, settings_dict)
        
        await callback.answer(f"‚úÖ {_('settings.quality_changed', quality=quality)}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await show_settings(callback)
        
    except Exception as e:
        logger.error(f"Error changing quality: {e}")
        await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)

@router.callback_query(F.data == "toggle_tips")
async def toggle_tips(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    try:
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)
            return
        
        user_lang = user.language_code or 'ru'
        def _(key, **kwargs):
            return i18n.get(key, lang=user_lang, **kwargs)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_dict = user.settings or {}
        current_state = settings_dict.get('show_tips', True)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        settings_dict['show_tips'] = not current_state
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await db.update_user_settings(user.id, settings_dict)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_state = not current_state
        status = _('settings.enabled') if new_state else _('settings.disabled')
        message = _('settings.tips_status', status=status)
        
        await callback.answer(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await show_settings(callback)
        
    except Exception as e:
        logger.error(f"Error toggling tips: {e}")
        await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)

@router.callback_query(F.data == "account_info")
async def account_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    try:
        user = await db.get_user(callback.from_user.id)
        if not user:
            await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)
            return
        
        user_lang = user.language_code or 'ru'
        def _(key, **kwargs):
            return i18n.get(key, lang=user_lang, **kwargs)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_generations = await db.get_user_total_generations(user.id)
        total_spent = await db.get_user_total_spent(user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_date = user.created_at.strftime("%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —è–∑—ã–∫–∞
        lang_names = {
            'ru': _('languages.ru'),
            'en': _('languages.en')
        }
        
        user_name = user.first_name or _('common.user')
        language_name = lang_names.get(user_lang, user_lang)
        
        text = _('settings.account_info_text',
                user_id=user.id,
                name=user_name,
                language=language_name,
                date=registration_date,
                balance=user.balance,
                spent=total_spent,
                generations=total_generations
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text=f"üóë {_('settings.delete_account')}", callback_data="delete_account_confirm")
        builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="settings")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in account info: {e}")
        await callback.answer(i18n.get('settings.error_loading', lang='ru'), show_alert=True)

@router.callback_query(F.data == "delete_account_confirm")
async def delete_account_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user = await db.get_user(callback.from_user.id)
    user_lang = user.language_code or 'ru'
    
    def _(key, **kwargs):
        return i18n.get(key, lang=user_lang, **kwargs)
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üóë {_('settings.delete_confirm')}", callback_data="delete_account_final")
    builder.button(text=f"‚úÖ {_('settings.keep_account')}", callback_data="account_info")
    builder.adjust(1)
    
    await callback.message.edit_text(
        _('settings.delete_warning'),
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "delete_account_final")
async def delete_account_final(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        user = await db.get_user(callback.from_user.id)
        user_lang = user.language_code or 'ru'
        
        def _(key, **kwargs):
            return i18n.get(key, lang=user_lang, **kwargs)
        
        user_id = callback.from_user.id
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await db.delete_user(user_id)
        
        if success:
            await callback.message.edit_text(_('settings.delete_final'))
        else:
            await callback.answer(_('settings.delete_error'), show_alert=True)
            
    except Exception as e:
        logger.error(f"Error deleting account: {e}")
        await callback.answer(i18n.get('settings.delete_error', lang='ru'), show_alert=True)

@router.callback_query(F.data == "privacy_settings")
async def privacy_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    try:
        user = await db.get_user(callback.from_user.id)
        user_lang = user.language_code or 'ru'
        
        def _(key, **kwargs):
            return i18n.get(key, lang=user_lang, **kwargs)
        
        text = _('settings.privacy_description')
        
        builder = InlineKeyboardBuilder()
        builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="settings")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in privacy settings: {e}")
        await callback.answer(i18n.get('settings.privacy_error', lang='ru'), show_alert=True)
