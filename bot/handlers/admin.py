import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, func, delete
import re

from bot.keyboard.inline import get_admin_keyboard, get_cancel_keyboard
from bot.utils.messages import MessageTemplates
from bot.middlewares.i18n import I18n
from services.database import db
from services.api_monitor import api_monitor
from core.config import settings
from models.models import User, AdminLog, Generation, Transaction, PromoCodeUsage, SupportTicket
from core.constants import GenerationStatus

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
i18n = I18n()
_ = lambda key, **kwargs: i18n.get(key, lang='ru', **kwargs)

class AdminStates(StatesGroup):
    broadcast_message = State()
    broadcast_confirm = State()
    give_credits_user = State()
    give_credits_amount = State()
    user_search = State()
    banning_user = State()
    unbanning_user = State()

router = Router(name="admin")

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
_admin_cache = {}
def admin_filter(update: Message | CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = update.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    cache_key = f"admin_{user_id}"
    cached_result = _admin_cache.get(cache_key)
    if cached_result and cached_result['expires'] > datetime.now():
        return cached_result['is_admin']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    is_admin_user = user_id in settings.ADMIN_IDS
    
    # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    _admin_cache[cache_key] = {
        'is_admin': is_admin_user,
        'expires': datetime.now() + timedelta(minutes=5)
    }
    
    return is_admin_user

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in settings.ADMIN_IDS

@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not await is_admin(message.from_user.id):
        return
    
    text = f"üëë <b>{_('admin.panel')}</b>\n\n"
    text += _('admin.choose_action')
    
    await message.answer(text, reply_markup=get_admin_keyboard('ru'))

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    try:
        stats = await db.get_bot_statistics()
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        
        text += "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        text += f"‚îú –í—Å–µ–≥–æ: {stats['users']['total']}\n"
        text += f"‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['users']['active_today']}\n"
        text += f"‚îî –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['users']['new_today']}\n\n"
        
        text += "üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n"
        text += f"‚îú –í—Å–µ–≥–æ: {stats['generations']['total']}\n"
        text += f"‚îú –°–µ–≥–æ–¥–Ω—è: {stats['generations']['today']}\n"
        text += f"‚îî –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['generations']['pending']}\n\n"
        
        text += "üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
        text += f"‚îú –î–æ—Ö–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è: {stats['finance']['revenue_today']} Stars\n"
        text += f"‚îî –û–±—â–∏–µ –¥–æ—Ö–æ–¥—ã: {stats['finance']['total_revenue']} Stars"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")
        builder.button(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error loading admin stats: {e}")
        await callback.answer(_('admin.error_stats'), show_alert=True)

@router.callback_query(F.data == "admin_menu")
async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    text = f"üëë <b>{_('admin.panel')}</b>\n\n"
    text += _('admin.choose_action')
    
    await callback.message.edit_text(text, reply_markup=get_admin_keyboard('ru'))
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def show_admin_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    try:
        # –ü–µ—Ä–≤—ã–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await db.get_all_users(limit=50)
        total_users = len(await db.get_all_users(limit=1000))  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
        
        if not users:
            await callback.answer(_('admin.users.not_found', default="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"), show_alert=True)
            return
        
        text = f"üë• <b>{_('admin.users.title')}</b>\n\n"
        text += f"{_('admin.users.total', count=total_users)}\n\n"
        
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            status = "üö´" if user.is_banned else "‚úÖ"
            name = user.first_name or user.username or f"ID{user.telegram_id}"
            text += f"{status} {name} (ID: {user.telegram_id})\n"
        
        if len(users) > 10:
            text += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        builder = InlineKeyboardBuilder()
        
        page = 1
        total_pages = (total_users + 49) // 50  # –ü–æ 50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if page > 1:
            builder.button(text="‚óÄÔ∏è", callback_data=f"admin_users_page_{page-1}")
        if page < total_pages:
            text_btn = f"{page}/{total_pages}"
            data = "noop"
            if page < total_pages:
                builder.button(text="‚ñ∂Ô∏è", callback_data=f"admin_users_page_{page+1}")
        
        builder.button(text=f"üîç {_('admin.users.search')}", callback_data="admin_user_search")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
        builder.adjust(2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error loading users: {e}")
        await callback.answer(_('admin.loading_error'), show_alert=True)

@router.callback_query(F.data.startswith("admin_users_page_"))
async def admin_users_pagination(callback: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    try:
        page = int(callback.data.split("_")[-1])
        if page < 1:
            await callback.answer(_('admin.invalid_page'), show_alert=True)
            return
    except (ValueError, IndexError):
        await callback.answer(_('admin.invalid_page'), show_alert=True)
        return

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    await callback.message.edit_text(
        _('admin.broadcast.instruction'),
        reply_markup=InlineKeyboardBuilder().button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="admin_menu"
        ).as_markup()
    )
    
    await state.set_state(AdminStates.broadcast_message)
    await callback.answer()

@router.message(AdminStates.broadcast_message)
async def handle_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.update_data(broadcast_message=message.message_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    users_count = await db.get_users_count()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_text = f"üì¢ <b>{_('admin.broadcast.confirm')}</b>\n\n"
    confirm_text += f"{_('admin.broadcast.recipients', count=users_count)}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text:
        preview = message.text[:100]
        if len(message.text) > 100:
            preview += "..."
        confirm_text += f"üìù <b>–¢–µ–∫—Å—Ç:</b> {preview}\n\n"
    elif message.photo:
        confirm_text += f"üì∏ <b>–§–æ—Ç–æ</b>"
        if message.caption:
            preview = message.caption[:100]
            if len(message.caption) > 100:
                preview += "..."
            confirm_text += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {preview}"
        confirm_text += "\n\n"
    
    confirm_text += f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚úÖ {_('admin.broadcast.start')}", callback_data="broadcast_confirm")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
    builder.adjust(1)
    
    await message.answer(confirm_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "broadcast_confirm")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    data = await state.get_data()
    broadcast_message_id = data.get("broadcast_message")
    
    if not broadcast_message_id:
        await callback.answer(_('admin.broadcast.no_message'), show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    users = await db.get_all_users()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"üì¢ <b>{_('admin.broadcast.started')}</b>\n\n"
        f"{_('admin.broadcast.progress', sent=0, total=len(users))}"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
    success_count = 0
    error_count = 0
    
    for i, user in enumerate(users):
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.bot.copy_message(
                chat_id=user.telegram_id,
                from_chat_id=callback.from_user.id,
                message_id=broadcast_message_id
            )
            success_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (i + 1) % 10 == 0:
                progress_text = f"üì¢ <b>{_('admin.broadcast.started')}</b>\n\n"
                progress_text += f"{_('admin.broadcast.progress', sent=i+1, total=len(users))}"
                
                try:
                    await callback.message.edit_text(progress_text)
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    
        except Exception as e:
            error_count += 1
            logger.error(f"Broadcast error for user {user.telegram_id}: {e}")
            
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await asyncio.sleep(0.1)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_text = f"‚úÖ <b>{_('admin.broadcast.completed')}</b>\n\n"
    final_text += f"{_('admin.broadcast.stats', success=success_count, errors=error_count)}"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
    
    await callback.message.edit_text(final_text, reply_markup=builder.as_markup())
    await state.clear()

@router.callback_query(F.data == "admin_give_credits")
async def give_credits(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤—ã–¥–∞—á—É –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    await callback.message.edit_text(
        _('admin.credits.enter_user'),
        reply_markup=InlineKeyboardBuilder().button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="admin_menu"
        ).as_markup()
    )
    
    await state.set_state(AdminStates.give_credits_user)
    await callback.answer()

@router.message(AdminStates.give_credits_user)
async def handle_give_credits_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_input = message.text.strip()
        
        user = None
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
        if user_input.isdigit():
            user_id = int(user_input)
            user = await db.get_user_by_telegram_id(user_id)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username
        if not user and user_input.startswith('@'):
            username = user_input[1:]  # –£–±–∏—Ä–∞–µ–º @
            user = await db.get_user_by_username(username)
        
        if not user:
            await message.answer(
                _('admin.credits.user_not_found'),
                reply_markup=InlineKeyboardBuilder().button(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="admin_menu"
                ).as_markup()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(target_user=user.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = _('admin.credits.user_info',
                     name=user.first_name or _('admin.users.never'),
                     balance=user.balance,
                     bought=user.total_bought,
                     spent=user.total_spent)
        
        await message.answer(
            user_info,
            reply_markup=InlineKeyboardBuilder().button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="admin_menu"
            ).as_markup()
        )
        
        await state.set_state(AdminStates.give_credits_amount)
        
    except Exception as e:
        logger.error(f"Error finding user for credits: {e}")
        await message.answer(
            _('admin.credits.user_not_found'),
            reply_markup=InlineKeyboardBuilder().button(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="admin_menu"
            ).as_markup()
        )

@router.message(AdminStates.give_credits_amount)
async def handle_give_credits_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    try:
        amount = int(message.text.strip())
        
        if amount == 0:
            await message.answer(_('admin.credits.invalid_amount'))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        target_user_id = data.get("target_user")
        
        if not target_user_id:
            await message.answer(_('admin.users.not_found_error', default="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.async_session() as session:
            user = await session.get(User, target_user_id)
            
            if not user:
                await message.answer(_('admin.user_not_found'))
                await state.clear()
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            old_balance = user.balance
            user.balance = max(0, user.balance + amount)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if amount > 0:
                user.total_bought += amount
            else:
                user.total_spent += abs(amount)
            
            await session.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await db.log_admin_action(
                admin_id=message.from_user.id,
                action="give_credits",
                target_user_id=user.telegram_id,
                details=f"Amount: {amount}, Balance: {old_balance} -> {user.balance}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                if amount > 0:
                    notify_text = _('admin.credits.success_user',
                                   amount=amount,
                                   balance=user.balance)
                else:
                    notify_text = _('admin.credits.success_negative',
                                   amount=abs(amount),
                                   balance=user.balance)
                
                await message.bot.send_message(
                    chat_id=user.telegram_id,
                    text=notify_text
                )
            except Exception as e:
                logger.error(f"Error notifying user {user.telegram_id}: {e}")
            
            # –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
            action_text = _('admin.credits.action_added') if amount > 0 else _('admin.credits.action_removed')
            admin_text = _('admin.credits.success_admin',
                          user_id=user.telegram_id,
                          action=action_text,
                          amount=abs(amount),
                          balance=user.balance)
            
            await message.answer(
                admin_text,
                reply_markup=InlineKeyboardBuilder().button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="admin_menu"
                ).as_markup()
            )
            
    except ValueError:
        await message.answer(_('admin.credits.invalid_amount'))
        return
    except Exception as e:
        logger.error(f"Error giving credits: {e}")
        await message.answer(
            _('admin.credits.error'),
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                callback_data="admin_menu"
            ).as_markup()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "admin_bans")
async def show_bans_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞–º–∏"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
        async with db.async_session() as session:
            banned_count = await session.execute(
                select(func.count(User.id)).where(User.is_banned == True)
            )
            banned = banned_count.scalar() or 0
        
        builder = InlineKeyboardBuilder()
        builder.button(text=f"üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ ({banned})", callback_data="show_banned_users")
        builder.button(text="‚ûï –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="ban_user_start")
        builder.button(text="‚ûñ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="unban_user_start")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üö´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∞–º–∏</b>\n\n"
                    f"{_('admin.bans.total_banned', banned=banned)}\n\n"
        f"{_('admin.choose_action')}",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing bans menu: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

@router.callback_query(F.data == "show_banned_users")
async def show_banned_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        async with db.async_session() as session:
            banned_users = await session.execute(
                select(User).where(User.is_banned == True).limit(20)
            )
            users = banned_users.scalars().all()
        
        if not users:
            await callback.answer(_('admin.bans.no_banned'), show_alert=True)
            return
        
        text = "üö´ <b>–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        
        for user in users:
            text += f"‚Ä¢ {user.telegram_id} - @{user.username or '–Ω–µ—Ç'}\n"
            if user.ban_reason:
                text += f"  –ü—Ä–∏—á–∏–Ω–∞: {user.ban_reason}\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_bans")
        
        await callback.message.edit_text(text)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing banned users: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

@router.callback_query(F.data == "admin_logs")
async def show_admin_logs(callback: CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        limit = 20
        offset = (page - 1) * limit
        
        async with db.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
            logs_query = await session.execute(
                select(AdminLog)
                .order_by(AdminLog.created_at.desc())
                .limit(limit)
                .offset(offset)
            )
            logs = logs_query.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            total_count = await session.execute(
                select(func.count(AdminLog.id))
            )
            total_logs = total_count.scalar() or 0
        
        total_pages = (total_logs + limit - 1) // limit
        
        text = f"üìã <b>–õ–æ–≥–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π</b> (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
        
        for log in logs:
            date = log.created_at.strftime("%d.%m %H:%M")
            text += f"‚Ä¢ {date} - Admin {log.admin_id}: {log.action}\n"
            if log.target_user_id:
                text += f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {log.target_user_id}\n"
            if log.details:
                text += f"  –î–µ—Ç–∞–ª–∏: {str(log.details)[:50]}...\n"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        
        if page > 1:
            builder.button(text="‚óÄÔ∏è", callback_data=f"admin_logs_page_{page-1}")
        builder.button(text=f"{page}/{total_pages}", callback_data="noop")
        if page < total_pages:
            builder.button(text="‚ñ∂Ô∏è", callback_data=f"admin_logs_page_{page+1}")
        
        builder.row()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
        
        await callback.message.edit_text(text)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing admin logs: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤", show_alert=True)

@router.callback_query(F.data.startswith("admin_logs_page_"))
async def admin_logs_pagination(callback: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ª–æ–≥–æ–≤"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        page = int(callback.data.split("_")[3])
        await show_admin_logs(callback, page=page)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

@router.callback_query(F.data == "admin_detailed_stats")
async def show_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with db.async_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
            model_stats = await session.execute(
                select(
                    Generation.model,
                    func.count(Generation.id).label('count')
                ).group_by(Generation.model)
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            week_ago = today - timedelta(days=7)
            
            daily_stats = await session.execute(
                select(
                    func.date(Generation.created_at).label('date'),
                    func.count(Generation.id).label('count')
                ).where(
                    Generation.created_at >= week_ago
                ).group_by('date')
            )
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            top_users = await session.execute(
                select(
                    User.telegram_id,
                    User.username,
                    func.count(Generation.id).label('gen_count')
                ).join(
                    Generation, User.id == Generation.user_id
                ).group_by(
                    User.id
                ).order_by(
                    func.count(Generation.id).desc()
                ).limit(5)
            )
        
        text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        
        text += "<b>–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π:</b>\n"
        for model, count in model_stats:
            model_name = model.split('-')[2].upper() if len(model.split('-')) > 2 else model
            text += f"‚Ä¢ {model_name}: {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        
        text += "\n<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n"
        for date, count in daily_stats:
            text += f"‚Ä¢ {date}: {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        
        text += "\n<b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        for i, (user_id, username, count) in enumerate(top_users, 1):
            text += f"{i}. @{username or 'user'} ({user_id}): {count} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="export_stats")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_stats")
        builder.adjust(1)
        
        await callback.message.edit_text(text)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing detailed stats: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@router.message(Command("ban"))
async def ban_user_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban user_id [reason]"""
    if not admin_filter(message):
        return
    
    parts = message.text.split(maxsplit=2)
    if len(parts) < 2:
        await message.answer(_('admin.ban.usage', default="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban user_id [–ø—Ä–∏—á–∏–Ω–∞]"))
        return
    
    try:
        user_id = int(parts[1])
        reason = parts[2] if len(parts) > 2 else _('admin.bans.default_reason', default="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±–∞–Ω–∏–º –∞–¥–º–∏–Ω–∞
        if user_id in settings.ADMIN_IDS:
            await message.answer(_('admin.bans.cannot_ban_admin'))
            return
        
        success = await db.ban_user(user_id, banned=True, reason=reason)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º
            async with db.async_session() as session:
                log = AdminLog(
                    admin_id=message.from_user.id,
                    action="ban_user",
                    target_user_id=user_id,
                    details={"reason": reason}
                )
                session.add(log)
                await session.commit()
            
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        else:
            await message.answer(_('admin.users.not_found'))
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error banning user: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("unban"))
async def unban_user_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban user_id"""
    if not admin_filter(message):
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban user_id")
        return
    
    try:
        user_id = int(parts[1])
        success = await db.ban_user(user_id, banned=False)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º
            async with db.async_session() as session:
                log = AdminLog(
                    admin_id=message.from_user.id,
                    action="unban_user",
                    target_user_id=user_id
                )
                session.add(log)
                await session.commit()
            
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error unbanning user: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "admin_user_search")
async def start_user_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID, username –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 123456789 (ID)\n"
        "‚Ä¢ @username\n"
        "‚Ä¢ –ò–≤–∞–Ω (–∏–º—è)",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AdminStates.user_search)
    await callback.answer()

@router.message(AdminStates.user_search)
async def process_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not admin_filter(message):
        return
    
    search_query = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç SQL injection)
    if len(search_query) < 2:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(search_query) > 50:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    try:
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await db.search_users(search_query, limit=10)
        
        if not users:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {search_query[:30]}...\n\n"
        
        builder = InlineKeyboardBuilder()
        
        for user in users:
            text += f"‚Ä¢ {user.telegram_id} - @{user.username or '–Ω–µ—Ç'}\n"
            text += f"  {user.first_name or ''} {user.last_name or ''}\n"
            text += f"  üí∞ {user.balance} | üìÖ {user.created_at.strftime('%d.%m.%Y')}\n"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            builder.button(
                text=f"üë§ {user.telegram_id}",
                callback_data=f"admin_user_{user.telegram_id}"
            )
        
        builder.adjust(2)
        builder.row()
        builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin_user_search")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")
        
        await message.answer(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"Error searching users: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("admin_user_"))
async def show_user_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split("_")[2])
        user = await db.get_user(user_id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_user_statistics(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_active = user.last_active.strftime('%d.%m.%Y %H:%M') if user.last_active else _('admin.users.never')
        
        text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

üÜî <b>ID:</b> <code>{user.telegram_id}</code>
üë§ <b>–ò–º—è:</b> {user.first_name or "‚Äî"} {user.last_name or ""}
üè∑ <b>Username:</b> @{user.username or "‚Äî"}
üåê <b>–Ø–∑—ã–∫:</b> {user.language_code or "ru"}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚îú –ë–∞–ª–∞–Ω—Å: {user.balance} –∫—Ä–µ–¥–∏—Ç–æ–≤
‚îú –ö—É–ø–ª–µ–Ω–æ: {user.total_bought} –∫—Ä–µ–¥–∏—Ç–æ–≤
‚îî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_spent} –∫—Ä–µ–¥–∏—Ç–æ–≤

üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚îú –í—Å–µ–≥–æ: {stats.get('total_generations', 0)}
‚îú –£—Å–ø–µ—à–Ω—ã—Ö: {stats.get('successful_generations', 0)}
‚îî –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats.get('average_rating', 0):.1f}/5

üìÖ <b>–î–∞—Ç—ã:</b>
‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}
‚îî –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}

üîê <b>–°—Ç–∞—Ç—É—Å:</b> {"üö´ –ó–∞–±–∞–Ω–µ–Ω" if user.is_banned else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"}
‚≠ê <b>Premium:</b> {"‚úÖ –î–∞" if user.is_premium else "‚ùå –ù–µ—Ç"}
"""
        
        if user.is_banned and hasattr(user, 'ban_reason'):
            text += f"\nüö´ <b>–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞:</b> {user.ban_reason}"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()
        
        if user.is_banned:
            builder.button(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"quick_unban_{user.telegram_id}")
        else:
            builder.button(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"quick_ban_{user.telegram_id}")
        
        builder.button(text="üí∞ –í—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã", callback_data=f"quick_credits_{user.telegram_id}")
        builder.button(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={user.telegram_id}")
        builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", callback_data=f"user_generations_{user.telegram_id}")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")
        
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(text)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer()
        
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    except Exception as e:
        logger.error(f"Error showing user details: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

@router.callback_query(F.data.startswith("quick_ban_"))
async def quick_ban(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split("_")[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±–∞–Ω–∏–º –∞–¥–º–∏–Ω–∞
        if user_id in settings.ADMIN_IDS:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return
        
        success = await db.ban_user(user_id, banned=True, reason="Quick ban by admin")
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º
            async with db.async_session() as session:
                log = AdminLog(
                    admin_id=callback.from_user.id,
                    action="ban_user",
                    target_user_id=user_id,
                    details={"method": "quick_ban"}
                )
                session.add(log)
                await session.commit()
            
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            callback.data = f"admin_user_{user_id}"
            await show_user_details(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error quick banning user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("quick_unban_"))
async def quick_unban(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split("_")[2])
        success = await db.ban_user(user_id, banned=False)
        
        if success:
            # –õ–æ–≥–∏—Ä—É–µ–º
            async with db.async_session() as session:
                log = AdminLog(
                    admin_id=callback.from_user.id,
                    action="unban_user",
                    target_user_id=user_id,
                    details={"method": "quick_unban"}
                )
                session.add(log)
                await session.commit()
            
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            callback.data = f"admin_user_{user_id}"
            await show_user_details(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error quick unbanning user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("quick_credits_"))
async def quick_credits(callback: CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–∞—è –≤—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        user_id = int(callback.data.split("_")[2])
        await state.update_data(target_user_id=user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        builder = InlineKeyboardBuilder()
        
        quick_amounts = [10, 50, 100, 500, 1000, -50, -100]
        for amount in quick_amounts:
            emoji = "‚ûï" if amount > 0 else "‚ûñ"
            builder.button(
                text=f"{emoji} {abs(amount)}",
                callback_data=f"instant_credits_{user_id}_{amount}"
            )
        
        builder.button(text="‚úèÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="admin_give_credits")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_user_{user_id}")
        builder.adjust(4, 3, 1, 1)
        
        await callback.message.edit_text(
            "üí∞ <b>–ë—ã—Å—Ç—Ä–∞—è –≤—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
            reply_markup=builder.as_markup()
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in quick credits: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("instant_credits_"))
async def instant_credits(callback: CallbackQuery, bot):
    """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        parts = callback.data.split("_")
        user_id = int(parts[2])
        amount = int(parts[3])
        
        # –í—ã–¥–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        success = await db.add_credits_to_user(
            user_id, 
            amount,
            admin_id=callback.from_user.id,
            reason="Quick grant by admin"
        )
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                if amount > 0:
                    await bot.send_message(
                        user_id,
                        f"üéÅ <b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤!</b>\n\n"
                        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å."
                    )
                else:
                    await bot.send_message(
                        user_id,
                        f"üí∞ <b>–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {abs(amount)} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
                        f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è–º–∏."
                    )
            except:
                pass
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            async with db.async_session() as session:
                log = AdminLog(
                    admin_id=callback.from_user.id,
                    action="give_credits",
                    target_user_id=user_id,
                    details={
                        "amount": amount,
                        "method": "instant"
                    }
                )
                session.add(log)
                await session.commit()
            
            await callback.answer(
                f"‚úÖ {'–ù–∞—á–∏—Å–ª–µ–Ω–æ' if amount > 0 else '–°–ø–∏—Å–∞–Ω–æ'} {abs(amount)} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            callback.data = f"admin_user_{user_id}"
            await show_user_details(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error instant credits: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "export_stats")
async def export_stats(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    if not admin_filter(callback):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.answer(
        "üìä –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.",
        show_alert=True
    )

@router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data == "cancel", StateFilter(AdminStates))
async def cancel_admin_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardBuilder().button(
            text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é",
            callback_data="admin_menu"
        ).as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "ban_user_start")
async def ban_user_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üö´ <b>–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardBuilder().button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="admin_bans"
        ).as_markup()
    )
    await state.set_state(AdminStates.banning_user)
    await callback.answer()

@router.callback_query(F.data == "unban_user_start")
async def unban_user_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚úÖ <b>–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardBuilder().button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="admin_bans"
        ).as_markup()
    )
    await state.set_state(AdminStates.unbanning_user)
    await callback.answer()

@router.message(AdminStates.banning_user)
async def process_ban_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        if message.text and message.text.isdigit():
            user_id = int(message.text)
        elif message.forward_from:
            user_id = message.forward_from.id
        elif message.reply_to_message and message.reply_to_message.from_user:
            user_id = message.reply_to_message.from_user.id
        
        if not user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.get_user_by_telegram_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
        if user_id in settings.ADMIN_IDS:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.ban_user_by_id(user.id)
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üìÖ –î–∞—Ç–∞ –±–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            reply_markup=InlineKeyboardBuilder().button(
                text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é",
                callback_data="admin_menu"
            ).as_markup()
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                user_id,
                "üö´ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.message(AdminStates.unbanning_user)
async def process_unban_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        if message.text and message.text.isdigit():
            user_id = int(message.text)
        elif message.forward_from:
            user_id = message.forward_from.id
        elif message.reply_to_message and message.reply_to_message.from_user:
            user_id = message.reply_to_message.from_user.id
        
        if not user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await db.get_user_by_telegram_id(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not user.is_banned:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
            return
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.unban_user(user.id)
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω</b>\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üë§ –ò–º—è: {user.first_name}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–∞–∑–±–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            reply_markup=InlineKeyboardBuilder().button(
                text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é",
                callback_data="admin_menu"
            ).as_markup()
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(
                user_id,
                "‚úÖ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("user_generations_"))
async def show_user_generations(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_telegram_id(user_id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    async with db.async_session() as session:
        result = await session.execute(
            select(Generation)
            .where(Generation.user_id == user.id)
            .order_by(Generation.created_at.desc())
            .limit(20)
        )
        generations = result.scalars().all()
    
    if not generations:
        await callback.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</b>\n\n"
    text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name} (ID: {user_id})\n"
    text += f"üìä <b>–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b> {len(generations)}\n\n"
    
    from core.constants import STATUS_EMOJIS
    for gen in generations[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        status_emoji = STATUS_EMOJIS.get(gen.status, "‚ùì")
        date = gen.created_at.strftime('%d.%m %H:%M')
        text += f"{status_emoji} {date} - {gen.resolution} - {gen.model_type}\n"
    
    if len(generations) > 10:
        text += f"\n... –∏ –µ—â–µ {len(generations) - 10} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    successful = sum(1 for gen in generations if gen.status == 'completed')
    failed = len(generations) - successful
    
    text += f"\n\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}\n"
    text += f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}\n"
    text += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {user.total_spent}\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_{user_id}")
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data == "admin_api_balance")
async def check_api_balance(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å API"""
    if callback.from_user.id not in settings.ADMIN_IDS:
        await callback.answer(_('admin.access_denied'), show_alert=True)
        return
    
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å API...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance_check = await api_monitor.check_and_notify(callback.bot)
        
        balance = balance_check.get('balance')
        status = balance_check.get('status')
        
        if balance is None:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ API</b>\n\n"
            text += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ.\n"
            text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ —Ç–æ–∫–µ–Ω."
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            if status == 'critical':
                status_emoji = "üö®"
                status_text = "–ö–†–ò–¢–ò–ß–ù–û"
            elif status == 'low':
                status_emoji = "‚ö†Ô∏è"
                status_text = "–ù–ò–ó–ö–ò–ô"
            else:
                status_emoji = "‚úÖ"
                status_text = "–ù–û–†–ú–ê"
            
            text = f"{status_emoji} <b>–ë–∞–ª–∞–Ω—Å API: {status_text}</b>\n\n"
            text += f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${balance}\n"
            text += f"üìÖ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            
            text += "üéØ <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
            text += f"‚îú –ö—Ä–∏—Ç–∏—á–Ω—ã–π: ${api_monitor.critical_balance_threshold}\n"
            text += f"‚îî –ù–∏–∑–∫–∏–π: ${api_monitor.low_balance_threshold}\n\n"
            
            if status == 'critical':
                text += "üö® <b>–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –î–ï–ô–°–¢–í–ò–ï!</b>\n"
                text += "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                text += "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å API –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
            elif status == 'low':
                text += "‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b>\n"
                text += "–ë–∞–ª–∞–Ω—Å API —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–º."
            else:
                text += "‚úÖ <b>–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ</b>\n"
                text += "–ë–∞–ª–∞–Ω—Å API –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_api_balance")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
        builder.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error checking API balance: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ API", show_alert=True)

@router.message(Command("test_api_balance"))
async def test_api_balance(message: Message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ API (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in settings.ADMIN_IDS:
        return
    
    await message.answer("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞ API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance_check = await api_monitor.check_and_notify(message.bot)
        
        balance = balance_check.get('balance')
        status = balance_check.get('status')
        
        if balance is None:
            text = "‚ùå <b>–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>\n\n"
            text += "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å API.\n"
            text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
        else:
            text = f"‚úÖ <b>–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ</b>\n\n"
            text += f"üí∞ –ë–∞–ª–∞–Ω—Å API: ${balance}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"üéØ –°–µ—Ä–≤–∏—Å {'–¥–æ—Å—Ç—É–ø–µ–Ω' if api_monitor.is_service_available(balance) else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            text += "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n"
            text += f"‚îî –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: ${api_monitor.low_balance_threshold}\n"
            text += f"‚îî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π: ${api_monitor.critical_balance_threshold}\n"
            text += f"‚îî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if balance <= api_monitor.low_balance_threshold else '–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'}"
        
        await message.answer(text, parse_mode='HTML')
        
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n{str(e)}", parse_mode='HTML')
        logger.error(f"API balance test failed: {e}")

@router.message(Command("recover_videos"))
async def recover_lost_videos_command(message: Message):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –≤–∏–¥–µ–æ (–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)"""
    user = await db.get_user(message.from_user.id)
    
    if not user or not user.is_admin:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        status_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        failed_generations = await db.get_failed_generations_with_task_id(hours_back=24)
        
        if not failed_generations:
            await status_msg.edit_text("‚úÖ –ù–µ—É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        await status_msg.edit_text(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(failed_generations)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        from services.wavespeed_api import get_wavespeed_api
        api = get_wavespeed_api()
        recovered = await api.recover_lost_videos(failed_generations)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        notifications_sent = 0
        for recovery in recovered:
            try:
                from bot.tasks import send_generation_notification
                await send_generation_notification(
                    recovery['generation_id'],
                    'recovered',
                    video_url=recovery['video_url']
                )
                notifications_sent += 1
            except Exception as e:
                logger.error(f"Error sending recovery notification: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""
‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {len(failed_generations)}
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {len(recovered)}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_sent}

üÜî <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ ID:</b>
"""
        
        if recovered:
            for recovery in recovered[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                report += f"‚Ä¢ <code>{recovery['generation_id']}</code>\n"
            
            if len(recovered) > 10:
                report += f"‚Ä¢ ... –∏ –µ—â–µ {len(recovered) - 10}\n"
        else:
            report += "‚Ä¢ –ù–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
        
        await status_msg.edit_text(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in recover_videos command: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")