import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboard.inline import get_history_keyboard, get_back_keyboard
from bot.utils.messages import MessageTemplates
from services.database import db
from core.constants import STATUS_EMOJIS, GenerationStatus
from bot.middlewares.i18n import i18n
from core.config import settings

logger = logging.getLogger(__name__)

router = Router(name="balance")

@router.message(F.text == "/history")
@router.callback_query(F.data == "history")
async def show_history(update: Message | CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    user_id = update.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        if isinstance(update, CallbackQuery):
            await update.answer(_('errors.use_start'), show_alert=True)
        else:
            await update.answer(_('errors.use_start'))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    limit = 10
    offset = (page - 1) * limit
    generations = await db.get_user_generations(user.id, limit=limit, offset=offset)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    stats = await db.get_user_statistics(user_id)
    total_generations = stats.get('total_generations', 0)
    total_pages = max(1, (total_generations + limit - 1) // limit)
    
    if not generations:
        text = _('history.empty')
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=_("menu.generate"), callback_data="generate")
        keyboard.button(text=_("menu.main_menu"), callback_data="back_to_menu")
        keyboard.adjust(1)
        
        if isinstance(update, CallbackQuery):
            await update.message.edit_text(text, reply_markup=keyboard.as_markup())
            await update.answer()
        else:
            await update.answer(text, reply_markup=keyboard.as_markup())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"{_('history.title')} ({_('common.page', page=page, total=total_pages)})\n\n"
    
    for gen in generations:
        status_emoji = STATUS_EMOJIS.get(gen.status, "‚ùì")
        date = MessageTemplates.format_date(gen.created_at)
        mode_text = "T2V" if gen.mode == "t2v" else "I2V"
        
        text += f"{status_emoji} <b>{date}</b> - {mode_text} {gen.resolution}\n"
        if gen.status == GenerationStatus.COMPLETED and gen.rating:
            text += f"   ‚≠ê {_('history.rating', rating=gen.rating)}\n"
        text += "\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    keyboard = get_history_keyboard(generations, page, total_pages, user.language_code)
    
    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text, reply_markup=keyboard)
        await update.answer()
    else:
        await update.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("history_page_"))
async def history_pagination(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        page = int(callback.data.split("_")[2])
        await show_history(callback, page=page)
    except ValueError:
        await callback.answer(_('errors.navigation'), show_alert=True)

@router.callback_query(F.data.startswith("gen_details_"))
async def show_generation_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        generation_id = int(callback.data.split("_")[2])
    except ValueError:
        await callback.answer(_('errors.invalid_generation_id'), show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    generation = await db.get_generation(generation_id)
    if not generation:
        await callback.answer(_('errors.generation_not_found'), show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    user = await db.get_user(callback.from_user.id)
    if not user or generation.user_id != user.id:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    mode_text = MessageTemplates.get_mode_text(generation.mode)
    status_text = MessageTemplates.get_status_text(generation.status)
    
    additional_info = ""
    if generation.status == GenerationStatus.COMPLETED:
        if generation.generation_time:
            additional_info += f"\n‚è± <b>{_('generation.generation_time')}:</b> {int(generation.generation_time)} {_('generation.seconds', default='—Å–µ–∫')}"
        if generation.video_url or generation.video_file_id:
            additional_info += f"\nüîó <b>{_('generation.video_available', default='–í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ')}</b>"
    elif generation.status == GenerationStatus.FAILED:
        if generation.error_message:
            additional_info += f"\n‚ùå <b>{_('errors.error')}:</b> {generation.error_message[:200]}"
    
    text = f"{_('history.details')}\n\n"
    text += f"üÜî <b>ID:</b> <code>{generation.id}</code>\n"
    text += f"{_('history.date', date=generation.created_at.strftime('%d.%m.%Y %H:%M'))}\n"
    text += f"{_('history.status', status=status_text)}\n\n"
    text += f"{_('history.parameters')}\n"
    text += f"{_('history.mode', mode=mode_text)}\n"
    text += f"{_('history.model', model=generation.model)}\n"
    text += f"{_('history.resolution', resolution=generation.resolution.upper())}\n"
    text += f"{_('history.duration', duration=generation.duration)}\n"
    text += f"{_('history.cost', cost=generation.cost)}\n\n"
    text += f"{_('history.prompt')}\n"
    prompt_text = generation.prompt[:500] + "..." if len(generation.prompt) > 500 else generation.prompt
    text += f"<i>{prompt_text}</i>"
    text += additional_info
    
    # –ö–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    
    if generation.status == GenerationStatus.COMPLETED and (generation.video_url or generation.video_file_id):
        builder.button(
            text=f"üé¨ {_('generation.view_video', default='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ')}", 
            callback_data=f"view_video_{generation.id}"
        )
    
    if generation.status == GenerationStatus.COMPLETED and not generation.rating:
        builder.button(
            text=f"‚≠ê {_('generation.rate_video')}", 
            callback_data=f"rate_gen_{generation.id}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if generation.status == GenerationStatus.FAILED:
        builder.button(
            text=f"üîÑ {_('generation.retry', default='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å')}", 
            callback_data="generate"
        )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('history.back_to_history', default='–ö –∏—Å—Ç–æ—Ä–∏–∏')}", 
        callback_data="history"
    )
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("view_video_"))
async def view_video(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        generation_id = int(callback.data.split("_")[2])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    generation = await db.get_generation(generation_id)
    if not generation:
        await callback.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    user = await db.get_user(callback.from_user.id)
    if not user or generation.user_id != user.id:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    try:
        caption = (
            f"üé¨ {_('video.title', id=generation.id)}\n"
            f"üìÖ {generation.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìù {generation.prompt[:200]}..."
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å file_id —Ç–µ–ª–µ–≥—Ä–∞–º–∞ (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
        if generation.video_file_id and generation.video_file_id.startswith(('BAA', 'CAA', 'DAA')):
            await callback.message.answer_video(
                generation.video_file_id,
                caption=caption
            )
            await callback.answer(f"üì§ {_('video.sending', default='–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...')}")
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π URL
        elif generation.video_url:
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            try:
                from services.wavespeed_api import get_wavespeed_api
                api = get_wavespeed_api()
                video_data = await api.download_video(generation.video_url)
                
                # –ï—Å–ª–∏ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º QR-–∫–æ–¥
                if generation.used_bonus_credits:
                    try:
                        from services.video_processor import add_qr_code_to_video
                        logger.info(f"Adding QR code to video {generation.id} (created with bonus credits)")
                        video_data = await add_qr_code_to_video(video_data)
                    except Exception as e:
                        logger.error(f"Error adding QR code to video {generation.id}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ QR-–∫–æ–¥–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                
                from aiogram.types import BufferedInputFile
                video_file = BufferedInputFile(
                    video_data,
                    filename=f"seedance_{generation.id}.mp4"
                )
                
                sent_msg = await callback.message.answer_video(
                    video_file,
                    caption=caption
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                if sent_msg.video:
                    await db.update_generation_video_file_id(generation.id, sent_msg.video.file_id)
                
                await callback.answer(f"üì§ {_('video.sending', default='–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...')}")
            except Exception as e:
                logger.error(f"Error downloading video: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                await callback.message.answer(
                    f"üé¨ {_('video.link_available', default='–í–∞—à–µ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ')}:\n{generation.video_url}"
                )
                await callback.answer()
        else:
            await callback.answer(
                _('video.not_found', default='–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'), 
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"Error sending video: {e}")
        await callback.answer(
            _('video.send_error', default='–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ'), 
            show_alert=True
        )

@router.callback_query(F.data.startswith("rate_gen_"))
async def rate_generation_from_history(callback: CallbackQuery):
    """–û—Ü–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        generation_id = int(callback.data.split("_")[2])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    generation = await db.get_generation(generation_id)
    if not generation:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    user = await db.get_user(callback.from_user.id)
    if not user or generation.user_id != user.id:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ü–µ–Ω–∫–∏
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.button(text="‚≠ê" * i, callback_data=f"history_rate_{generation_id}_{i}")
    builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data="history")
    builder.adjust(5, 1)
    
    await callback.message.edit_text(
        f"‚≠ê <b>{_('generation.rate_generation', id=generation_id)}</b>\n\n"
        f"{_('generation.choose_rating', default='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥')}:"
    )
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("history_rate_"))
async def save_rating_from_history(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        parts = callback.data.split("_")
        generation_id = int(parts[2])
        rating = int(parts[3])
        
        if rating < 1 or rating > 5:
            raise ValueError("Invalid rating")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        generation = await db.get_generation(generation_id)
        user = await db.get_user(callback.from_user.id)
        
        if not generation or not user or generation.user_id != user.id:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        await db.rate_generation(generation_id, rating)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º
        await callback.answer(f"‚úÖ {_('generation.rating_saved', default='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º callback data –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
        callback.data = f"gen_details_{generation_id}"
        await show_generation_details(callback)
        
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏", show_alert=True)

@router.callback_query(F.data == "statistics")
async def show_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
        return
    
    stats = await db.get_user_statistics(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    _ = lambda key, **kwargs: i18n.get(key, user.language_code or 'ru', **kwargs)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —è–∑—ã–∫
    from core.constants import LANGUAGES
    language_name = LANGUAGES.get(user.language_code or 'ru', {}).get('name', '–†—É—Å—Å–∫–∏–π')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    reg_date = user.created_at.strftime("%d.%m.%Y") if user.created_at else "‚Äî"
    last_gen = MessageTemplates.format_date(stats.get('last_generation')) if stats.get('last_generation') else _('history.no_generations', default="–ù–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    avg_gen_per_day = 0
    if user.created_at:
        from datetime import datetime
        days_since_reg = (datetime.utcnow() - user.created_at).days or 1
        avg_gen_per_day = stats.get('total_generations', 0) / days_since_reg
    
    text = f"üìä <b>{_('statistics.title', default='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}</b>\n\n"
    text += f"üë§ <b>{_('statistics.profile', default='–ü—Ä–æ—Ñ–∏–ª—å')}:</b>\n"
    text += f"‚îú üÜî ID: <code>{user.telegram_id}</code>\n"
    text += f"‚îú üìÖ {_('statistics.registration', default='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')}: {reg_date}\n"
    text += f"‚îî üåê {_('statistics.language', default='–Ø–∑—ã–∫')}: {language_name}\n\n"
    
    text += f"üí∞ <b>{_('statistics.balance', default='–ë–∞–ª–∞–Ω—Å')}:</b>\n"
    text += f"‚îú üí≥ {_('statistics.current', default='–¢–µ–∫—É—â–∏–π')}: {user.balance} {_('common.credits')}\n"
    text += f"‚îú üì• {_('statistics.total_bought', default='–ö—É–ø–ª–µ–Ω–æ')}: {user.total_bought} {_('common.credits')}\n"
    text += f"‚îú üéÅ {_('statistics.bonuses_received', default='–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤')}: {stats.get('total_bonuses', 0)} {_('common.credits')}\n"
    text += f"‚îî üì§ {_('statistics.total_spent', default='–ü–æ—Ç—Ä–∞—á–µ–Ω–æ')}: {user.total_spent} {_('common.credits')}\n\n"
    
    text += f"üé¨ <b>{_('statistics.generations', default='–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏')}:</b>\n"
    text += f"‚îú üìä {_('statistics.total', default='–í—Å–µ–≥–æ')}: {stats.get('total_generations', 0)}\n"
    text += f"‚îú ‚úÖ {_('statistics.successful', default='–£—Å–ø–µ—à–Ω—ã—Ö')}: {stats.get('successful_generations', 0)}\n"
    text += f"‚îú ‚ùå {_('statistics.failed', default='–ù–µ—É–¥–∞—á–Ω—ã—Ö')}: {stats.get('total_generations', 0) - stats.get('successful_generations', 0)}\n"
    text += f"‚îú ‚≠ê {_('statistics.avg_rating', default='–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')}: {stats.get('average_rating', 0):.1f}/5\n"
    text += f"‚îî üìà {_('statistics.avg_per_day', default='–í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å')}: {avg_gen_per_day:.1f}\n\n"
    
    text += f"üìà <b>{_('statistics.activity', default='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')}:</b>\n"
    text += f"‚îú üìÖ {_('statistics.last_generation', default='–ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è')}: {last_gen}\n"
    text += f"‚îú üî• {_('statistics.current_streak', default='–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è')}: {stats.get('current_streak', 0)} {_('common.days', default='–¥–Ω–µ–π')}\n"
    text += f"‚îî üèÜ {_('statistics.max_streak', default='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è')}: {stats.get('max_streak', 0)} {_('common.days', default='–¥–Ω–µ–π')}"
    
    # –ö–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.button(text=_("menu.history"), callback_data="history")
    builder.button(text=_("menu.main_menu"), callback_data="back_to_menu")
    builder.adjust(2, 1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()