import asyncio
import logging
from celery import Celery, Task
from celery.utils.log import get_task_logger
from datetime import datetime, timedelta
import aiohttp
from typing import Dict, Any

from core.config import settings
from core.constants import GenerationStatus
from services.database import db
from services.wavespeed_api import get_wavespeed_api, GenerationRequest
from services.api_monitor import api_monitor
from models.models import User, Generation, Transaction, Statistics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery
app = Celery('seedance_bot')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
app.conf.update(
    broker_url=settings.REDIS_URL,
    result_backend=settings.REDIS_URL,
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
    task_track_started=True,
    task_time_limit=300,  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ –∑–∞–¥–∞—á—É
    task_soft_time_limit=240,  # –ú—è–≥–∫–∏–π –ª–∏–º–∏—Ç 4 –º–∏–Ω—É—Ç—ã
)

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–¥–∞—á
logger = get_task_logger(__name__)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
class AsyncTask(Task):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö Celery –∑–∞–¥–∞—á"""
    
    def run(self, *args, **kwargs):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ event loop"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(self.async_run(*args, **kwargs))
        finally:
            loop.close()
    
    async def async_run(self, *args, **kwargs):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        raise NotImplementedError

@app.task(bind=True, base=AsyncTask, max_retries=3, default_retry_delay=60)
class GenerateVideoTask(AsyncTask):
    """–ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    
    async def async_run(self, generation_id: int, generation_data: dict):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ"""
        logger.info(f"Starting video generation for ID: {generation_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å API –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            from aiogram import Bot
            bot = Bot(token=settings.BOT_TOKEN)
            balance_check = await api_monitor.check_and_notify(bot)
            
            if not api_monitor.is_service_available(balance_check.get('balance')):
                logger.error(f"Generation {generation_id} cancelled: API service unavailable")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞"
                await db.update_generation_status(
                    generation_id,
                    GenerationStatus.FAILED,
                    error_message="API service temporarily unavailable"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                generation = await db.get_generation(generation_id)
                if generation:
                    await db.update_user_balance(generation.user_id, generation.cost)
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    user = await db.get_user_by_id(generation.user_id)
                    if user:
                        from bot.middlewares.throttling import GenerationThrottling
                        GenerationThrottling.cancel_generation_limit(user.telegram_id)
                
                return {
                    'success': False,
                    'generation_id': generation_id,
                    'error': 'API service temporarily unavailable'
                }
        except Exception as e:
            logger.error(f"Error checking API balance before generation: {e}")
        
        api = get_wavespeed_api()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
            await db.update_generation_status(
                generation_id,
                GenerationStatus.PROCESSING,
                task_id=self.request.id
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            request = GenerationRequest(
                model=generation_data['model'],
                prompt=generation_data['prompt'],
                duration=generation_data['duration'],
                aspect_ratio=generation_data.get('aspect_ratio', '16:9'),
                image=generation_data.get('image'),
                seed=generation_data.get('seed', -1)
            )
            
            # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def progress_callback(progress: int, status: str):
                await db.update_generation_progress(
                    generation_id,
                    progress=progress,
                    status=status
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
            result = await api.generate_video(request, progress_callback)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await db.update_generation_status(
                generation_id,
                GenerationStatus.COMPLETED,
                video_url=result.video_url,
                generation_time=result.generation_time
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å API –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            try:
                from aiogram import Bot
                bot = Bot(token=settings.BOT_TOKEN)
                await api_monitor.check_and_notify(bot)
            except Exception as e:
                logger.error(f"Error checking API balance after generation: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_generation_notification(
                generation_id,
                'completed',
                video_url=result.video_url
            )
            
            logger.info(f"Video generation completed for ID: {generation_id}")
            return {
                'success': True,
                'generation_id': generation_id,
                'video_url': result.video_url,
                'generation_time': result.generation_time
            }
            
        except asyncio.CancelledError:
            logger.warning(f"Video generation cancelled for ID: {generation_id}")
            raise
        except Exception as e:
            logger.error(f"Video generation failed for ID {generation_id}: {str(e)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞"
            await db.update_generation_status(
                generation_id,
                GenerationStatus.FAILED,
                error_message=str(e)
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
            generation = await db.get_generation(generation_id)
            if generation:
                await db.update_user_balance(generation.user_id, generation.cost)
                
                # –û—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                user = await db.get_user_by_id(generation.user_id)
                if user:
                    from bot.middlewares.throttling import GenerationThrottling
                    GenerationThrottling.cancel_generation_limit(user.telegram_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await send_generation_notification(
                    generation_id,
                    'failed',
                    error=str(e)
                )
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–ù–ï –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
            error_str = str(e).lower()
            if (any(word in error_str for word in ['timeout', 'network', 'connection', 'temporarily']) and 
                not any(word in error_str for word in ['flagged', 'sensitive', 'content', 'moderation', 'inappropriate'])):
                logger.info(f"Retrying generation {generation_id} due to temporary error: {str(e)}")
                raise self.retry(exc=e, countdown=60, max_retries=2)
            
            return {
                'success': False,
                'generation_id': generation_id,
                'error': str(e)
            }

@app.task
async def send_generation_notification(generation_id: int, status: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    from aiogram import Bot
    
    generation = await db.get_generation(generation_id)
    
    if not generation:
        logger.error(f"Generation {generation_id} not found for notification")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_internal_id(generation.user_id)
    
    if not user:
        logger.error(f"User {generation.user_id} not found for notification")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    bot = Bot(token=settings.BOT_TOKEN)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        from bot.middlewares.i18n import i18n
        _ = lambda key, **kw: i18n.get(key, user.language_code or 'ru', **kw)
        
        if status == 'completed':
            text = (
                f"‚úÖ <b>{_('generation.video_ready', default='–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!')}</b>\n\n"
                f"üÜî ID: <code>{generation_id}</code>\n"
                f"{_('generation.use_history_to_view', default='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')}"
            )
        elif status == 'recovered':
            text = (
                f"üéâ <b>{_('generation.video_recovered', default='–í–∏–¥–µ–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')}</b>\n\n"
                f"üÜî ID: <code>{generation_id}</code>\n"
                f"üí° {_('generation.recovery_explanation', default='–í–∏–¥–µ–æ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏')}\n"
                f"{_('generation.use_history_to_view', default='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')}"
            )
        else:
            error = kwargs.get('error', 'Unknown error')
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if any(word in error.lower() for word in ['flagged', 'sensitive', 'content', 'moderation', 'inappropriate']):
                text = (
                    f"üö´ <b>{_('generation.moderation_error_title', default='–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')}</b>\n\n"
                    f"üÜî ID: <code>{generation_id}</code>\n"
                    f"üí∞ {_('generation.credits_returned', credits=generation.cost)}\n\n"
                    f"üìù {_('generation.moderation_reason', default='–ü—Ä–∏—á–∏–Ω–∞')}: –ö–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                    f"üí° {_('generation.moderation_advice', default='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')}"
                )
            else:
                text = (
                    f"‚ùå <b>{_('generation.error_title', default='–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')}</b>\n\n"
                    f"üÜî ID: <code>{generation_id}</code>\n"
                    f"üí∞ {_('generation.credits_returned', credits=generation.cost)}\n"
                    f"üìù {_('generation.error_reason', default='–ü—Ä–∏—á–∏–Ω–∞')}: {error}"
                )
        
        await bot.send_message(user.telegram_id, text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Failed to send notification: {e}")
    finally:
        await bot.session.close()

@app.task
def cleanup_old_generations():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(_cleanup_old_generations())
    finally:
        loop.close()

async def _cleanup_old_generations():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    # –£–¥–∞–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    cutoff_date = datetime.utcnow() - timedelta(days=30)
    
    async with db.async_session() as session:
        from sqlalchemy import delete
        
        result = await session.execute(
            delete(Generation).where(
                Generation.created_at < cutoff_date,
                Generation.status.in_([GenerationStatus.COMPLETED, GenerationStatus.FAILED])
            )
        )
        
        deleted_count = result.rowcount
        await session.commit()
        
        logger.info(f"Deleted {deleted_count} old generations")

@app.task
def calculate_daily_statistics():
    """–†–∞—Å—á–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(_calculate_daily_statistics())
    finally:
        loop.close()

async def _calculate_daily_statistics():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    yesterday = datetime.utcnow().date() - timedelta(days=1)
    
    async with db.async_session() as session:
        from sqlalchemy import select, func, and_
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        new_users = await session.execute(
            select(func.count(User.id)).where(
                func.date(User.created_at) == yesterday
            )
        )
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        active_users = await session.execute(
            select(func.count(func.distinct(Generation.user_id))).where(
                func.date(Generation.created_at) == yesterday
            )
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏
        total_generations = await session.execute(
            select(func.count(Generation.id)).where(
                func.date(Generation.created_at) == yesterday
            )
        )
        
        successful_generations = await session.execute(
            select(func.count(Generation.id)).where(
                and_(
                    func.date(Generation.created_at) == yesterday,
                    Generation.status == GenerationStatus.COMPLETED
                )
            )
        )
        
        # –î–æ—Ö–æ–¥
        revenue = await session.execute(
            select(func.sum(Transaction.stars_paid)).where(
                and_(
                    func.date(Transaction.created_at) == yesterday,
                    Transaction.status == 'completed'
                )
            )
        )
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        avg_gen_time = await session.execute(
            select(func.avg(Generation.generation_time)).where(
                and_(
                    func.date(Generation.created_at) == yesterday,
                    Generation.status == GenerationStatus.COMPLETED,
                    Generation.generation_time.isnot(None)
                )
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = Statistics(
            date=yesterday,
            new_users=new_users.scalar() or 0,
            active_users=active_users.scalar() or 0,
            total_generations=total_generations.scalar() or 0,
            successful_generations=successful_generations.scalar() or 0,
            failed_generations=(total_generations.scalar() or 0) - (successful_generations.scalar() or 0),
            revenue_stars=revenue.scalar() or 0,
            avg_generation_time=avg_gen_time.scalar()
        )
        
        session.add(stats)
        await session.commit()
        
        logger.info(f"Daily statistics calculated for {yesterday}")

@app.task
def send_inactive_user_reminder():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(_send_inactive_user_reminder())
    finally:
        loop.close()

async def _send_inactive_user_reminder():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    from aiogram import Bot
    from bot.middlewares.i18n import i18n
    
    bot = Bot(token=settings.BOT_TOKEN)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 7 –¥–Ω–µ–π
    inactive_date = datetime.utcnow() - timedelta(days=7)
    
    async with db.async_session() as session:
        from sqlalchemy import and_, select
        
        inactive_users = await session.execute(
            select(User).where(
                and_(
                    User.last_active < inactive_date,
                    User.balance > 0,  # –¢–æ–ª—å–∫–æ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                    User.is_banned == False
                )
            ).limit(100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        )
        
        sent_count = 0
        
        for user in inactive_users.scalars():
            try:
                _ = lambda key, **kw: i18n.get(key, user.language_code or 'ru', **kw)
                
                text = (
                    f"üëã {_('reminder.hello', default='–ü—Ä–∏–≤–µ—Ç!')}\n\n"
                    f"{_('reminder.inactive', default='–í—ã –¥–∞–≤–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –≤–∏–¥–µ–æ.')}\n"
                    f"{_('reminder.balance', balance=user.balance)}\n\n"
                    f"{_('reminder.try_new', default='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–¥–µ–ª–∏!')} üé¨"
                )
                
                await bot.send_message(user.telegram_id, text, parse_mode='HTML')
                sent_count += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"Failed to send reminder to user {user.telegram_id}: {e}")
        
        logger.info(f"Sent {sent_count} inactive user reminders")
    
    await bot.session.close()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
from celery.schedules import crontab

app.conf.beat_schedule = {
    'cleanup-old-generations': {
        'task': 'bot.tasks.cleanup_old_generations',
        'schedule': crontab(hour=3, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
    },
    'calculate-daily-statistics': {
        'task': 'bot.tasks.calculate_daily_statistics',
        'schedule': crontab(hour=0, minute=30),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 0:30
    },
    'send-inactive-reminders': {
        'task': 'bot.tasks.send_inactive_user_reminder',
        'schedule': crontab(hour=12, minute=0, day_of_week=1),  # –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00
    },
}

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
generate_video_task = app.register_task(GenerateVideoTask())

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
async def cancel_generation_task(generation_id: int) -> bool:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        generation = await db.get_generation(generation_id)
        if generation and generation.task_id:
            app.control.revoke(generation.task_id, terminate=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await db.update_generation_status(
                generation_id,
                GenerationStatus.CANCELLED
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            await db.update_user_balance(generation.user_id, generation.cost)
            
            # –û—Ç–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            user = await db.get_user_by_id(generation.user_id)
            if user:
                from bot.middlewares.throttling import GenerationThrottling
                GenerationThrottling.cancel_generation_limit(user.telegram_id)
            
            logger.info(f"Generation task {generation.task_id} cancelled")
            return True
        return False
    except Exception as e:
        logger.error(f"Error cancelling generation task: {e}")
        return False

async def get_task_status(task_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
    try:
        result = app.AsyncResult(task_id)
        return {
            'state': result.state,
            'result': result.result,
            'info': result.info
        }
    except Exception as e:
        logger.error(f"Error getting task status: {e}")
        return {'state': 'UNKNOWN', 'error': str(e)}

@app.task
async def recover_lost_videos_task():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
    logger.info("Starting lost videos recovery task")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        failed_generations = await db.get_failed_generations_with_task_id(hours_back=24)
        
        if not failed_generations:
            logger.info("No failed generations to check for recovery")
            return {'recovered': 0, 'checked': 0}
        
        logger.info(f"Checking {len(failed_generations)} failed generations for recovery")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        api = get_wavespeed_api()
        recovered = await api.recover_lost_videos(failed_generations)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
        for recovery in recovered:
            try:
                await send_generation_notification(
                    recovery['generation_id'],
                    'recovered',
                    video_url=recovery['video_url']
                )
                logger.info(f"Sent recovery notification for generation {recovery['generation_id']}")
            except Exception as e:
                logger.error(f"Error sending recovery notification: {e}")
        
        logger.info(f"Recovery task completed: {len(recovered)} videos recovered from {len(failed_generations)} checked")
        
        return {
            'recovered': len(recovered),
            'checked': len(failed_generations)
        }
        
    except Exception as e:
        logger.error(f"Error in recovery task: {e}")
        return {'error': str(e)}