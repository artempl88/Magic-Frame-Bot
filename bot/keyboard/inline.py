from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional

from core.constants import (
    LANGUAGES, CREDIT_PACKAGES, RESOLUTIONS, 
    DURATIONS, ASPECT_RATIOS, MODEL_INFO
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º i18n –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
from bot.middlewares.i18n import i18n as global_i18n

def get_language_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    for code, lang_info in LANGUAGES.items():
        builder.button(
            text=f"{lang_info['emoji']} {lang_info['name']}",
            callback_data=f"set_language_{code}"
        )
    
    builder.adjust(2)
    return builder.as_markup()

def get_aspect_ratio_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    for ratio, description in ASPECT_RATIOS.items():
        builder.button(
            text=description,
            callback_data=f"ratio_{ratio.replace(':', '_')}"
        )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('common.back')}",
        callback_data="back_to_duration"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_generation_confirm_keyboard(cost: int, language: str = "ru") -> InlineKeyboardMarkup:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=f"‚úÖ {_('generation.confirm')} ({cost} {_('common.credits', default='–∫—Ä–µ–¥–∏—Ç–æ–≤')})",
        callback_data="confirm_generation"
    )
    builder.button(
        text=f"‚ùå {_('common.cancel')}",
        callback_data="cancel_generation"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_shop_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ú–∞–≥–∞–∑–∏–Ω –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    for package in CREDIT_PACKAGES:
        button_text = f"{package.emoji} {package.credits} {_('common.credits')}"
        if package.badge:
            button_text += f" {package.badge}"
        
        builder.button(
            text=button_text,
            callback_data=f"buy_{package.id}"
        )
    
    builder.button(
        text=f"üéÅ {_('shop.special_offers')}",
        callback_data="special_offers"
    )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('menu.main_menu')}",
        callback_data="back_to_menu"
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ 2 –≤ —Ä—è–¥, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π
    rows = []
    for i in range(0, len(CREDIT_PACKAGES), 2):
        rows.append(2)
    rows.extend([1, 1])  # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫
    
    builder.adjust(*rows)
    return builder.as_markup()

def get_package_details_keyboard(package_id: str, language: str = "ru") -> InlineKeyboardMarkup:
    """–î–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=f"üí≥ {_('shop.pay', default='–û–ø–ª–∞—Ç–∏—Ç—å')}",
        callback_data=f"pay_{package_id}"
    )
    builder.button(
        text=f"‚óÄÔ∏è {_('shop.back_to_packages', default='–ù–∞–∑–∞–¥ –∫ –ø–∞–∫–µ—Ç–∞–º')}",
        callback_data="shop"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_payment_keyboard(url: str, language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=f"üí≥ {_('payment.pay_with_stars', default='–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars')}",
        url=url
    )
    builder.button(
        text=f"‚ùå {_('common.cancel')}",
        callback_data="shop"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_generation_rating_keyboard(generation_id: int, language: str = "ru") -> InlineKeyboardMarkup:
    """–û—Ü–µ–Ω–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    # –ó–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    for i in range(1, 6):
        builder.button(
            text="‚≠ê" * i,
            callback_data=f"rate_{generation_id}_{i}"
        )
    
    builder.button(
        text=_("generation.skip_rating", default="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
        callback_data="skip_rating"
    )
    
    builder.adjust(5, 1)
    return builder.as_markup()

def get_history_keyboard(
    generations: List,
    page: int = 1,
    total_pages: int = 1,
    language: str = "ru"
) -> InlineKeyboardMarkup:
    """–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    for gen in generations:
        from core.constants import STATUS_EMOJIS
        status_emoji = STATUS_EMOJIS.get(gen.status, "‚ùì")
        builder.button(
            text=f"{status_emoji} {gen.created_at.strftime('%d.%m %H:%M')} - {gen.resolution}",
            callback_data=f"gen_details_{gen.id}"
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"history_page_{page-1}"
            )
        )
    
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"{page}/{total_pages}",
            callback_data="noop"
        )
    )
    
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"history_page_{page+1}"
            )
        )
    
    builder.row(*nav_buttons)
    builder.row(
        InlineKeyboardButton(
            text=f"‚óÄÔ∏è {_('menu.main_menu')}",
            callback_data="back_to_menu"
        )
    )
    
    return builder.as_markup()

def get_settings_keyboard(user_settings: dict, language: str = "ru") -> InlineKeyboardMarkup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    # –Ø–∑—ã–∫
    current_lang = LANGUAGES.get(user_settings.get('language', language), {}).get('name', '–†—É—Å—Å–∫–∏–π')
    builder.button(
        text=f"üåê {_('settings.language')}: {current_lang}",
        callback_data="change_language"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notif_status = "‚úÖ" if user_settings.get('notifications', True) else "‚ùå"
    builder.button(
        text=f"üîî {_('settings.notifications')}: {notif_status}",
        callback_data="toggle_notifications"
    )
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    quality = user_settings.get('quality_preference', '720p')
    builder.button(
        text=f"üìä {_('settings.quality_preference')}: {quality}",
        callback_data="change_quality"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏
    tips_status = "‚úÖ" if user_settings.get('show_tips', True) else "‚ùå"
    builder.button(
        text=f"üí° {_('settings.tips')}: {tips_status}",
        callback_data="toggle_tips"
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    builder.button(
        text=f"üë§ {_('settings.account_info', default='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ')}",
        callback_data="account_info"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    builder.button(
        text=f"üîê {_('settings.privacy', default='–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å')}",
        callback_data="privacy_settings"
    )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('menu.main_menu')}",
        callback_data="back_to_menu"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_admin_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(text=f"üìä {_('admin.statistics')}", callback_data="admin_stats")
    builder.button(text=f"üë• {_('admin.users.title')}", callback_data="admin_users")
    builder.button(text=f"üì¢ {_('admin.broadcast.title')}", callback_data="admin_broadcast")
    builder.button(text=f"üéÅ {_('admin.credits.title')}", callback_data="admin_give_credits")
    builder.button(text=f"üö´ {_('admin.bans.title')}", callback_data="admin_bans")
    builder.button(text=f"üíæ {_('admin.backup.title', default='–ë—ç–∫–∞–ø—ã –ë–î')}", callback_data="admin_backup")
    builder.button(text=f"üí∞ {_('admin.prices.title', default='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏')}", callback_data="admin_prices")
    builder.button(text=f"üß© UTM –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="utm_analytics")
    builder.button(text=f"üí∞ {_('admin.api_balance')}", callback_data="admin_api_balance")
    builder.button(text=f"üìã {_('admin.logs.title')}", callback_data="admin_logs")
    builder.button(text=f"‚óÄÔ∏è {_('menu.main_menu')}", callback_data="back_to_menu")
    
    builder.adjust(2, 2, 2, 2, 2, 1)
    return builder.as_markup()

def get_support_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=f"‚ùì {_('support.faq')}",
        callback_data="faq"
    )
    builder.button(
        text=f"‚úçÔ∏è {_('support.new_ticket')}",
        callback_data="new_ticket"
    )
    builder.button(
        text=f"üìã {_('support.my_tickets', default='–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è')}",
        callback_data="my_tickets"
    )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('menu.main_menu')}",
        callback_data="back_to_menu"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_price_management_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(text=f"üìä {_('admin.prices.view', default='–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã')}", callback_data="price_view")
    builder.button(text=f"‚úèÔ∏è {_('admin.prices.edit', default='–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã')}", callback_data="price_edit")
    builder.button(text=f"üí≥ {_('admin.prices.yookassa', default='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Æ–ö–∞—Å—Å—ã')}", callback_data="price_yookassa")
    builder.button(text=f"üìà {_('admin.prices.history', default='–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω')}", callback_data="price_history")
    builder.button(text=f"üîÑ {_('admin.prices.reset', default='–°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–Ω—ã')}", callback_data="price_reset")
    builder.button(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
    
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()

def get_package_edit_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    for package in CREDIT_PACKAGES:
        builder.button(
            text=f"{package.emoji} {package.name}",
            callback_data=f"price_edit_{package.id}"
        )
    
    builder.button(text=f"‚óÄÔ∏è {_('admin.back')}", callback_data="admin_prices")
    
    builder.adjust(2, 1)
    return builder.as_markup()

def get_price_edit_options_keyboard(package_id: str, language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(text=f"‚≠ê {_('price.edit_stars', default='–¶–µ–Ω–∞ –≤ Stars')}", callback_data=f"price_stars_{package_id}")
    builder.button(text=f"üí≥ {_('price.edit_rub', default='–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö')}", callback_data=f"price_rub_{package_id}")
    builder.button(text=f"üìù {_('price.edit_note', default='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')}", callback_data=f"price_note_{package_id}")
    builder.button(text=f"üóë {_('price.delete', default='–£–¥–∞–ª–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ü–µ–Ω—É')}", callback_data=f"price_delete_{package_id}")
    builder.button(text=f"‚óÄÔ∏è {_('admin.back')}", callback_data="price_edit")
    
    builder.adjust(2, 1, 1, 1)
    return builder.as_markup()

def get_backup_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞–º–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=f"‚ûï {_('admin.backup.create', default='–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø')}",
        callback_data="backup_create"
    )
    builder.button(
        text=f"üìÅ {_('admin.backup.list', default='–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤')}",
        callback_data="backup_list"
    )
    builder.button(
        text=f"üìä {_('admin.backup.stats', default='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}",
        callback_data="backup_stats"
    )
    builder.button(
        text=f"üßπ {_('admin.backup.cleanup', default='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ')}",
        callback_data="backup_cleanup"
    )
    builder.button(
        text=f"‚óÄÔ∏è {_('common.back')}",
        callback_data="admin_panel"
    )
    
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_backup_list_keyboard(backups: list, language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –±—ç–∫–∞–ø–æ–≤"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤
    for backup in backups[:10]:
        created_at = backup['created_at'].strftime('%d.%m %H:%M')
        size_mb = backup['size_mb']
        button_text = f"üìÑ {backup['filename'][:20]}... ({size_mb:.1f}MB)"
        
        builder.button(
            text=button_text,
            callback_data=f"backup_info_{backup['filename']}"
        )
    
    builder.button(
        text=f"üîÑ {_('common.refresh')}",
        callback_data="backup_list"
    )
    builder.button(
        text=f"‚óÄÔ∏è {_('common.back')}",
        callback_data="admin_backup"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_backup_info_keyboard(filename: str, language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±—ç–∫–∞–ø–æ–º"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=f"üóëÔ∏è {_('admin.backup.delete', default='–£–¥–∞–ª–∏—Ç—å')}",
        callback_data=f"backup_delete_{filename}"
    )
    builder.button(
        text=f"‚ö†Ô∏è {_('admin.backup.restore', default='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')}",
        callback_data=f"backup_restore_{filename}"
    )
    builder.button(
        text=f"‚óÄÔ∏è {_('common.back')}",
        callback_data="backup_list"
    )
    
    builder.adjust(2, 1)
    return builder.as_markup()

def get_cancel_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚ùå {_('common.cancel')}", callback_data="cancel_generation")
    return builder.as_markup()

def get_simple_cancel_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –æ–±—â–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚ùå {_('common.cancel')}", callback_data="cancel")
    return builder.as_markup()

def get_back_keyboard(callback_data: str = "back", language: str = "ru") -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"‚óÄÔ∏è {_('common.back')}", callback_data=callback_data)
    return builder.as_markup()

def get_main_menu(language: str = "ru", balance: int = 0) -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.button(text=f"üé¨ {_('menu.generate')}", callback_data="generate")
    builder.button(text=f"üí∞ {_('menu.balance', balance=balance)}", callback_data="balance")
    builder.button(text=f"üíé {_('menu.buy_credits')}", callback_data="shop")
    builder.button(text=f"üìú {_('menu.history')}", callback_data="history")
    builder.button(text=f"‚öôÔ∏è {_('menu.settings')}", callback_data="settings")
    builder.button(text=f"‚ùì {_('menu.help')}", callback_data="help_menu")
    builder.button(text=f"üí¨ {_('menu.support')}", callback_data="support")
    
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()

def get_generation_mode_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text=f"üìù {_('generation.text_to_video')}",
        callback_data="mode_t2v"
    )
    builder.button(
        text=f"üñº {_('generation.image_to_video')}",
        callback_data="mode_i2v"
    )
    builder.button(
        text=f"‚ùå {_('common.cancel')}",
        callback_data="back_to_menu"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_model_selection_keyboard(mode: str, language: str = "ru") -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    # –¢–æ–ª—å–∫–æ –¥–ª—è Text-to-Video –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Google Veo3
    if mode == "t2v":
        # Google Veo3 Fast
        veo3_fast_info = MODEL_INFO["veo3_fast"]
        builder.button(
            text=f"{veo3_fast_info['emoji']} {veo3_fast_info['name']}",
            callback_data=f"model_veo3_fast_{mode}"
        )
        
        # Google Veo3
        veo3_info = MODEL_INFO["veo3"]
        builder.button(
            text=f"{veo3_info['emoji']} {veo3_info['name']}",
            callback_data=f"model_veo3_{mode}"
        )
    
    # Lite –º–æ–¥–µ–ª—å
    lite_info = MODEL_INFO["lite"]
    builder.button(
        text=f"{lite_info['emoji']} {lite_info['name']}",
        callback_data=f"model_lite_{mode}"
    )
    
    # Pro –º–æ–¥–µ–ª—å
    pro_info = MODEL_INFO["pro"]
    builder.button(
        text=f"{pro_info['emoji']} {pro_info['name']}",
        callback_data=f"model_pro_{mode}"
    )
    
    builder.button(
        text=f"ü§î {_('models.compare')}",
        callback_data="compare_models"
    )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('common.back')}",
        callback_data="generate"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_resolution_keyboard(model_type: str, language: str = "ru") -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    # –î–ª—è Pro –≤–µ—Ä—Å–∏–∏ —É–±–∏—Ä–∞–µ–º 720p
    available_resolutions = RESOLUTIONS.copy()
    if model_type == "pro":
        available_resolutions.pop("720p", None)
    
    for res_id, res_info in available_resolutions.items():
        builder.button(
            text=f"{res_info['emoji']} {res_info['name']}",
            callback_data=f"res_{res_id}"
        )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('common.back')}",
        callback_data="back_to_model"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def get_duration_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    _ = lambda key, **kwargs: global_i18n.get(key, language, **kwargs)
    
    builder = InlineKeyboardBuilder()
    
    for duration, dur_info in DURATIONS.items():
        builder.button(
            text=f"{dur_info['emoji']} {dur_info['name']}",
            callback_data=f"dur_{duration}"
        )
    
    builder.button(
        text=f"‚óÄÔ∏è {_('common.back')}",
        callback_data="back_to_resolution"
    )
    
    builder.adjust(2)
    return builder.as_markup()