import json
import os
import logging
from typing import Callable, Dict, Any, Awaitable, Optional
from pathlib import Path
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject

logger = logging.getLogger(__name__)

class I18n:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    
    def __init__(self, default_lang: str = 'ru', locales_dir: str = 'locales'):
        self.default_lang = default_lang
        self.locales_dir = Path(locales_dir)
        self.translations: Dict[str, Dict] = {}
        self._load_fallback_translations()
        self.load_translations()
    
    def _load_fallback_translations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        self.translations['ru'] = {
            'language_info': {
                'name': '–†—É—Å—Å–∫–∏–π',
                'native_name': '–†—É—Å—Å–∫–∏–π',
                'emoji': 'üá∑üá∫'
            },
            'common': {
                'back': '–ù–∞–∑–∞–¥',
                'cancel': '–û—Ç–º–µ–Ω–∞',
                'credits': '–∫—Ä–µ–¥–∏—Ç–æ–≤',
                'page': '—Å—Ç—Ä. {page}/{total}',
                'days': '–¥–Ω–µ–π'
            },
            'menu': {
                'main': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'main_menu': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                'generate': '–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ',
                'buy_credits': '–ö—É–ø–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã',
                'balance': '–ë–∞–ª–∞–Ω—Å: {balance}',
                'history': '–ò—Å—Ç–æ—Ä–∏—è',
                'referral': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
                'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                'help': '–ü–æ–º–æ—â—å',
                'support': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                'videos_created': '–°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {count}',
                'choose_action': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
            },
            'errors': {
                'insufficient_balance': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤',
                'error': '–û—à–∏–±–∫–∞',
                'prompt_too_long': '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç',
                'prompt_too_short': '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç',
                'image_too_large': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ',
                'invalid_file_type': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'
            }
        }
    
    def load_translations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        if not self.locales_dir.exists():
            logger.warning(f"Locales directory {self.locales_dir} does not exist, using fallback translations")
            return
        
        for locale_file in self.locales_dir.glob('*.json'):
            lang_code = locale_file.stem
            try:
                with open(locale_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                        self.translations[lang_code] = json.loads(content)
                        logger.info(f"Loaded locale: {lang_code}")
                    else:
                        logger.warning(f"Empty locale file: {lang_code}")
            except json.JSONDecodeError as e:
                logger.error(f"Invalid JSON in locale {lang_code}: {e}")
            except Exception as e:
                logger.error(f"Failed to load locale {lang_code}: {e}")
    
    def get(
        self,
        key: str,
        lang: Optional[str] = None,
        default: Optional[str] = None,
        **kwargs
    ) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É
        
        Args:
            key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "menu.generate")
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        lang = lang or self.default_lang
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞
        translations = self.translations.get(lang)
        if not translations:
            translations = self.translations.get(self.default_lang, {})
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É
        keys = key.split('.')
        value = translations
        
        for k in keys:
            if isinstance(value, dict):
                value = value.get(k)
            else:
                value = None
                break
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        if value is None:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —è–∑—ã–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if lang != self.default_lang:
                default_translations = self.translations.get(self.default_lang, {})
                default_value = default_translations
                for k in keys:
                    if isinstance(default_value, dict):
                        default_value = default_value.get(k)
                    else:
                        default_value = None
                        break
                if default_value is not None:
                    value = default_value
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º default –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
            if value is None:
                if default is not None:
                    return default
                logger.debug(f"Translation not found: {key} for lang {lang}")
                return key
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if isinstance(value, str) and kwargs:
            try:
                return value.format(**kwargs)
            except KeyError as e:
                logger.error(f"Format error in translation {key}: {e}")
                return value
        
        return value
    
    def get_available_languages(self) -> Dict[str, Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        languages = {}
        for lang_code in self.translations.keys():
            lang_info = self.translations[lang_code].get('language_info', {})
            languages[lang_code] = {
                'name': lang_info.get('name', lang_code),
                'native_name': lang_info.get('native_name', lang_code),
                'emoji': lang_info.get('emoji', 'üåê')
            }
        return languages

class I18nMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, i18n: Optional[I18n] = None):
        self.i18n = i18n or I18n()
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ i18n –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        user = data.get("event_from_user")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lang = self.i18n.default_lang
        
        if user:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            db_user = data.get('db_user')
            if db_user and db_user.language_code:
                user_lang = db_user.language_code
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ Telegram
                user_lang = self.determine_user_language(user)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        def _(key: str, default: Optional[str] = None, **kwargs) -> str:
            return self.i18n.get(key, lang=user_lang, default=default, **kwargs)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        data['i18n'] = self.i18n
        data['_'] = _
        data['user_lang'] = user_lang
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)
    
    def determine_user_language(self, telegram_user) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞ Telegram"""
        if not hasattr(telegram_user, 'language_code') or not telegram_user.language_code:
            return self.i18n.default_lang
        
        lang_code = telegram_user.language_code.lower()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if lang_code in self.i18n.translations:
            return lang_code
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–æ–≤ —Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
        base_lang = lang_code.split('-')[0].split('_')[0]
        if base_lang in self.i18n.translations:
            return base_lang
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ ru –∏ en)
        lang_mapping = {
            'en': ['en-us', 'en_us', 'en-gb', 'en_gb'],
            'ru': ['ru-ru', 'ru_ru']
        }
        
        for supported_lang, variants in lang_mapping.items():
            if lang_code in variants:
                return supported_lang
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return self.i18n.default_lang

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä i18n
i18n = I18n()

def get_text(key: str, lang: str = 'ru', default: Optional[str] = None, **kwargs) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º"""
    return i18n.get(key, lang, default, **kwargs)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def localized(key_prefix: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    
    Usage:
        @localized("menu")
        async def menu_handler(message: Message, _: Callable):
            await message.answer(_("main"))  # –ë—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å "menu.main"
    """
    def decorator(func):
        async def wrapper(event, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            _ = kwargs.get('_')
            if _ and key_prefix:
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                def prefixed_translate(key: str, default: Optional[str] = None, **format_kwargs):
                    full_key = f"{key_prefix}.{key}" if not key.startswith('.') else key[1:]
                    return _(full_key, default=default, **format_kwargs)
                kwargs['_'] = prefixed_translate
            
            return await func(event, *args, **kwargs)
        
        return wrapper
    return decorator

# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–∞–º–∏
class LanguageManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @staticmethod
    async def set_user_language(user_id: int, language: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from services.database import db
        
        try:
            user = await db.get_user(user_id)
            if user:
                user.language_code = language
                if user.settings is None:
                    user.settings = {}
                user.settings['language'] = language
                
                async with db.async_session() as session:
                    session.add(user)
                    await session.commit()
                
                return True
            return False
        except Exception as e:
            logger.error(f"Error setting user language: {e}")
            return False
    
    @staticmethod
    async def get_user_language(user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from services.database import db
        
        try:
            user = await db.get_user(user_id)
            if user and user.language_code:
                return user.language_code
            return i18n.default_lang
        except Exception as e:
            logger.error(f"Error getting user language: {e}")
            return i18n.default_lang
    
    @staticmethod
    def get_language_keyboard():
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        builder = InlineKeyboardBuilder()
        languages = i18n.get_available_languages()
        
        for lang_code, lang_info in languages.items():
            builder.button(
                text=f"{lang_info['emoji']} {lang_info['native_name']}",
                callback_data=f"set_language_{lang_code}"
            )
        
        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        builder.adjust(2)
        return builder.as_markup()