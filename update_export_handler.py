# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('bot/handlers/utm_admin.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ù–∞–π–¥–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
export_start = content.find('@router.callback_query(F.data.startswith("utm_export_"))')
# –ò—â–µ–º –∫–æ–Ω–µ—Ü, –Ω–æ –Ω–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π utm_export_summary_
export_end = content.find('@router.callback_query', export_start + 1)
while export_end != -1 and 'utm_export_summary_' in content[export_end:export_end+100]:
    export_end = content.find('@router.callback_query', export_end + 1)

# –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
new_export_handler = '''@router.callback_query(F.data.startswith("utm_export_"))
@admin_required 
async def export_campaign_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏ –≤ CSV"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ summary —ç–∫—Å–ø–æ—Ä—Ç
    if "utm_export_summary_" in callback.data:
        return
    
    campaign_id = int(callback.data.split("_")[-1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=30)
        
        data = await utm_service.export_campaign_data(campaign_id, start_date, end_date, export_format="detailed")
        
        if not data:
            await callback.answer("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        output = io.StringIO()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
        fieldnames = [
            'campaign_name', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_content',
            'click_id', 'clicked_at', 'click_date', 'click_hour', 'click_day_of_week',
            'telegram_id', 'username', 'first_name', 'last_name', 'language_code',
            'is_first_visit', 'is_registered_user', 'is_premium', 'user_credits_balance',
            'user_registration_date', 'user_agent', 'ip_address', 'referrer',
            'event_type', 'event_at', 'revenue', 'credits_spent', 'credits_purchased',
            'time_from_click_seconds', 'time_from_click_minutes', 'time_from_click_hours',
            'has_converted', 'conversion_type', 'export_timestamp'
        ]
        
        writer = csv.DictWriter(output, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(data)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        csv_content = output.getvalue().encode('utf-8')
        filename = f"utm_detailed_{campaign_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        file = BufferedInputFile(csv_content, filename=filename)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        campaign_name = data[0]['campaign_name'] if data else f"Campaign {campaign_id}"
        total_clicks = len(set(row['click_id'] for row in data))
        total_events = len([row for row in data if row['event_type']])
        total_revenue = sum(float(row['revenue']) for row in data)
        
        await callback.message.answer_document(
            file,
            caption=f"""üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ UTM –∫–∞–º–ø–∞–Ω–∏–∏</b>

üìã <b>–ö–∞–º–ø–∞–Ω–∏—è:</b> {campaign_name}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
üìù <b>–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ:</b> {len(data)}
üë• <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–∫–æ–≤:</b> {total_clicks}
üéØ <b>–°–æ–±—ã—Ç–∏—è:</b> {total_events}
üí∞ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {total_revenue:.2f}‚ÇΩ

<i>–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–∫—É –∏ —Å–æ–±—ã—Ç–∏—é, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —Ç—Ä–∞—Ñ–∏–∫–∞.</i>""",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"Error exporting UTM campaign {campaign_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)

'''

# –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
if export_end != -1 and 'utm_export_' in content[export_start:export_start+100]:
    content = content[:export_start] + new_export_handler + content[export_end:]
elif 'utm_export_' in content[export_start:export_start+100]:
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–µ—Ü, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    content = content[:export_start] + new_export_handler + '\n\n'

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
with open('bot/handlers/utm_admin.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("–û–±–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
